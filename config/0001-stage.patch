From 573bf32b3e9a3f1df50d835cd045c14c32cb8975 Mon Sep 17 00:00:00 2001
From: Sakura286 <sakura286@outlook.com>
Date: Mon, 27 Jun 2022 11:57:24 +0800
Subject: [PATCH] stage

---
 .../cpp_uno/gcc3_linux_riscv64/call.hxx       |   35 +
 .../source/cpp_uno/gcc3_linux_riscv64/call.s  |  144 ++
 .../cpp_uno/gcc3_linux_riscv64/cpp2uno.cxx    |  706 +++++++
 .../cpp_uno/gcc3_linux_riscv64/except.cxx     |  290 +++
 .../cpp_uno/gcc3_linux_riscv64/share.hxx      |   89 +
 .../cpp_uno/gcc3_linux_riscv64/uno2cpp.cxx    |  561 ++++++
 configure.ac                                  | 1792 +++++++++--------
 solenv/gbuild/platform/LINUX_RISCV64_GCC.mk   |   14 +
 8 files changed, 2747 insertions(+), 884 deletions(-)
 create mode 100755 bridges/source/cpp_uno/gcc3_linux_riscv64/call.hxx
 create mode 100644 bridges/source/cpp_uno/gcc3_linux_riscv64/call.s
 create mode 100644 bridges/source/cpp_uno/gcc3_linux_riscv64/cpp2uno.cxx
 create mode 100755 bridges/source/cpp_uno/gcc3_linux_riscv64/except.cxx
 create mode 100755 bridges/source/cpp_uno/gcc3_linux_riscv64/share.hxx
 create mode 100755 bridges/source/cpp_uno/gcc3_linux_riscv64/uno2cpp.cxx
 create mode 100644 solenv/gbuild/platform/LINUX_RISCV64_GCC.mk

diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/call.hxx b/bridges/source/cpp_uno/gcc3_linux_riscv64/call.hxx
new file mode 100755
index 000000000..dc84d56b8
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/call.hxx
@@ -0,0 +1,35 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+
+#pragma once
+
+#include <sal/config.h>
+
+#include <sal/types.h>
+
+namespace {
+
+  extern "C" typelib_TypeClass cpp_vtable_call(
+      sal_Int32 nFunctionIndex, sal_Int32 nVtableOffset,
+      void ** gpreg, void ** fpreg, void ** ovrflw,
+      sal_uInt64 * pRegisterReturn /* space for register return */ );
+
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/call.s b/bridges/source/cpp_uno/gcc3_linux_riscv64/call.s
new file mode 100644
index 000000000..5fd0fca11
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/call.s
@@ -0,0 +1,144 @@
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+// https://cgit.freedesktop.org/libreoffice/core/tree/bridges/source/cpp_uno/gcc3_linux_mips64/call.s
+
+        .text
+        .globl	privateSnippetExecutor
+.LFB0 = .
+        .cfi_startproc
+        .cfi_personality 0x80,DW.ref.__gxx_personality_v0
+        //.cfi_lsda 0,.LLSDA0
+        // vimer fix
+        //.ent	privateSnippetExecutor
+        .globl privateSnippetExecutor
+        .type	privateSnippetExecutor, @function
+	// fix 
+	.cfi_endproc
+privateSnippetExecutor:
+        // vimer fix
+        //.set	noreorder
+        // non pseudo-instruction == noreorder in riscv64
+	.cfi_startproc
+        addw	sp,sp,-160
+        .cfi_def_cfa_offset 160
+        sd	ra,152(sp)
+        .cfi_offset 31, -8
+	.cfi_endproc
+.LEHB0 = .
+        // Save the float point registers
+        fsd   	f0,80(sp)
+        fsd  	f1,88(sp)
+        fsd 	f2,96(sp)
+        fsd 	f3,104(sp)
+        fsd 	f4,112(sp)
+        fsd 	f5,120(sp)
+        fsd	    f6,128(sp)
+        fsd 	f7,136(sp)
+        // Save the general purpose registers
+        sd	a0,16(sp)
+        sd	a1,24(sp)
+        sd	a2,32(sp)
+        sd	a3,40(sp)
+        sd	a4,48(sp)
+        sd	a5,56(sp)
+        sd	a6,64(sp)
+        sd	a7,72(sp)
+        // Load arguments
+        // a0=index
+        mv	a6,a0
+        // a1=offset
+        mv	a7,a1
+        // a2=gpregptr
+        addw a2,sp,16
+        // a3=fpregptr
+        addw a3,sp,80
+        // a4=ovrflw
+        addw a4,sp,160
+        // Call cpp_vtable_call
+        jalr	t3
+        // a5=retregptr
+        mv	a5,sp
+
+.LEHE0 = .
+        // Perform return value
+        li	a0,10
+        beq	a0,a1,.Lfloat
+        li	a1,11
+        beq	a0,a1,.Lfloat
+        fld 	f0,0(sp)
+        fld	    f2,8(sp)
+        ld	a0,0(sp)
+        beq 	zero,zero,.Lfinish
+        ld	a1,8(sp)
+.Lfloat:
+        fld 	f0,0(sp)
+        fld  	f2,8(sp)
+
+.Lfinish:
+	.cfi_startproc
+        ld	ra,152(sp)
+        .cfi_restore 31
+        jr	ra
+        addw	sp,sp,160
+        .cfi_def_cfa_offset 0
+
+        //.set	reorder
+        .cfi_endproc
+        .end	privateSnippetExecutor
+.LFE0:
+        .globl	__gxx_personality_v0
+        .section	.gcc_except_table,"aw",@progbits
+        .align	3
+.LLSDA0:
+        .byte	0xff
+        .byte	0x80
+        .uleb128 .LLSDATT0-.LLSDATTD0
+.LLSDATTD0:
+        .byte	0x1
+        .uleb128 .LLSDACSE0-.LLSDACSB0
+.LLSDACSB0:
+        .uleb128 .LEHB0-.LFB0
+        .uleb128 .LEHE0-.LEHB0
+        .uleb128 0
+        .uleb128 0
+.LLSDACSE0:
+        .byte	0x7f
+        .byte	0
+        .align	3
+        .8byte	DW.ref._ZTIi
+.LLSDATT0:
+        .byte	0x1
+        .byte	0
+        .text
+        .size	privateSnippetExecutor, .-privateSnippetExecutor
+        .hidden	DW.ref._ZTIi
+        .weak	DW.ref._ZTIi
+        .section	.data.DW.ref._ZTIi,"awG",@progbits,DW.ref._ZTIi,comdat
+        .align	3
+        .type	DW.ref._ZTIi, @object
+        .size	DW.ref._ZTIi, 8
+DW.ref._ZTIi:
+        .dword	_ZTIi
+        .hidden	DW.ref.__gxx_personality_v0
+        .weak	DW.ref.__gxx_personality_v0
+        .section	.data.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
+        .align	3
+        .type	DW.ref.__gxx_personality_v0, @object
+        .size	DW.ref.__gxx_personality_v0, 8
+DW.ref.__gxx_personality_v0:
+        .dword	__gxx_personality_v0
diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/cpp2uno.cxx b/bridges/source/cpp_uno/gcc3_linux_riscv64/cpp2uno.cxx
new file mode 100644
index 000000000..8f8ccf981
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/cpp2uno.cxx
@@ -0,0 +1,706 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+#include <com/sun/star/uno/genfunc.hxx>
+#include <sal/log.hxx>
+#include <typelib/typedescription.hxx>
+#include <uno/data.h>
+#include <osl/endian.h>
+#include "bridge.hxx"
+#include "cppinterfaceproxy.hxx"
+#include "types.hxx"
+#include "vtablefactory.hxx"
+#include "call.hxx"
+#include "share.hxx"
+
+#include <stdio.h>
+#include <string.h>
+
+using namespace com::sun::star::uno;
+
+//#define BRDEBUG
+
+#ifdef BRDEBUG
+#include <rtl/strbuf.hxx>
+#include <rtl/ustrbuf.hxx>
+using namespace ::std;
+using namespace ::osl;
+using namespace ::rtl;
+#endif
+
+//#ifndef ANDROID
+//#include <sys/sysmips.h>
+//#endif
+
+#ifdef ANDROID
+#include <unistd.h>
+#endif
+
+namespace CPPU_CURRENT_NAMESPACE
+{
+  bool is_complex_struct(const typelib_TypeDescription * type)
+  {
+      const typelib_CompoundTypeDescription * p
+          = reinterpret_cast< const typelib_CompoundTypeDescription * >(type);
+      for (sal_Int32 i = 0; i < p->nMembers; ++i)
+      {
+          if (p->ppTypeRefs[i]->eTypeClass == typelib_TypeClass_STRUCT ||
+              p->ppTypeRefs[i]->eTypeClass == typelib_TypeClass_EXCEPTION)
+          {
+              typelib_TypeDescription * t = 0;
+              TYPELIB_DANGER_GET(&t, p->ppTypeRefs[i]);
+              bool b = is_complex_struct(t);
+              TYPELIB_DANGER_RELEASE(t);
+              if (b) {
+                  return true;
+              }
+          }
+          else if (!bridges::cpp_uno::shared::isSimpleType(p->ppTypeRefs[i]->eTypeClass))
+              return true;
+      }
+      if (p->pBaseTypeDescription != 0)
+          return is_complex_struct(&p->pBaseTypeDescription->aBase);
+      return false;
+  }
+
+  bool return_in_hidden_param( typelib_TypeDescriptionReference *pTypeRef )
+  {
+      if (bridges::cpp_uno::shared::isSimpleType(pTypeRef))
+          return false;
+      else if (pTypeRef->eTypeClass == typelib_TypeClass_STRUCT ||
+               pTypeRef->eTypeClass == typelib_TypeClass_EXCEPTION)
+      {
+          typelib_TypeDescription * pTypeDescr = 0;
+          TYPELIB_DANGER_GET( &pTypeDescr, pTypeRef );
+
+          //A Composite Type not larger than 16 bytes is returned in up to two GPRs
+          bool bRet = pTypeDescr->nSize > 16 || is_complex_struct(pTypeDescr);
+
+          TYPELIB_DANGER_RELEASE( pTypeDescr );
+          return bRet;
+      }
+      return true;
+  }
+}
+
+namespace
+{
+
+  static typelib_TypeClass cpp2uno_call(
+      bridges::cpp_uno::shared::CppInterfaceProxy * pThis,
+      const typelib_TypeDescription * pMemberTypeDescr,
+      typelib_TypeDescriptionReference * pReturnTypeRef, // 0 indicates void return
+      sal_Int32 nParams, typelib_MethodParameter * pParams,
+      void ** gpreg, void ** fpreg, void ** ovrflw,
+      sal_uInt64 * pRegisterReturn /* space for register return */ )
+  {
+    /*  Most MIPS ABIs view the arguments as a struct, of which the
+        first N words go in registers and the rest go on the stack.  If I < N, the
+        With word might go in With integer argument register or the With
+        floating-point one.  For these ABIs, we only need to remember the number
+        of words passed so far.  We are interested only in n64 ABI,so it is the
+        case.
+        */
+    unsigned int nREG = 0;
+
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp2uno_call:begin\n");
+#endif
+
+    // return
+    typelib_TypeDescription * pReturnTypeDescr = 0;
+    if (pReturnTypeRef)
+      TYPELIB_DANGER_GET( &pReturnTypeDescr, pReturnTypeRef );
+
+    void * pUnoReturn = 0;
+    void * pCppReturn = 0; // complex return ptr: if != 0 && != pUnoReturn, reconversion need
+
+    if (pReturnTypeDescr)
+    {
+      if (CPPU_CURRENT_NAMESPACE::return_in_hidden_param( pReturnTypeRef ) )
+      {
+        pCppReturn = gpreg[nREG]; // complex return via ptr (pCppReturn)
+        nREG++;
+
+        pUnoReturn = ( bridges::cpp_uno::shared::relatesToInterfaceType( pReturnTypeDescr )
+            ? alloca( pReturnTypeDescr->nSize )
+            : pCppReturn); // direct way
+#ifdef BRDEBUG
+        fprintf(stderr, "cpp2uno_call:complexreturn\n");
+#endif
+      }
+      else
+      {
+        pUnoReturn = pRegisterReturn; // direct way for simple types
+#ifdef BRDEBUG
+        fprintf(stderr, "cpp2uno_call:simplereturn\n");
+#endif
+      }
+    }
+
+    // pop this
+    nREG++;
+
+    // stack space
+    static_assert(sizeof(void *) == sizeof(sal_Int64), "### unexpected size!");
+    // parameters
+    void ** pUnoArgs = (void **)alloca( 4 * sizeof(void *) * nParams );
+    void ** pCppArgs = pUnoArgs + nParams;
+    // indices of values this have to be converted (interface conversion cpp<=>uno)
+    sal_Int32 * pTempIndices = (sal_Int32 *)(pUnoArgs + (2 * nParams));
+    // type descriptions for reconversions
+    typelib_TypeDescription ** ppTempParamTypeDescr = (typelib_TypeDescription **)(pUnoArgs + (3 * nParams));
+
+    sal_Int32 nTempIndices   = 0;
+
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp2uno_call:nParams=%d\n", nParams);
+#endif
+    for ( sal_Int32 nPos = 0; nPos < nParams; ++nPos )
+    {
+      const typelib_MethodParameter & rParam = pParams[nPos];
+
+      typelib_TypeDescription * pParamTypeDescr = 0;
+      TYPELIB_DANGER_GET( &pParamTypeDescr, rParam.pTypeRef );
+
+      if (!rParam.bOut && bridges::cpp_uno::shared::isSimpleType( pParamTypeDescr )) // value
+      {
+#ifdef BRDEBUG
+        fprintf(stderr, "cpp2uno_call:Param %u, type %u\n", nPos, pParamTypeDescr->eTypeClass);
+#endif
+        switch (pParamTypeDescr->eTypeClass)
+        {
+          case typelib_TypeClass_FLOAT:
+          case typelib_TypeClass_DOUBLE:
+            if (nREG < MAX_FP_REGS) {
+#ifdef BRDEBUG
+              fprintf(stderr, "cpp2uno_call:fpr=%p\n", fpreg[nREG]);
+#endif
+              pCppArgs[nPos] = &(fpreg[nREG]);
+              pUnoArgs[nPos] = &(fpreg[nREG]);
+            } else {
+#ifdef BRDEBUG
+              fprintf(stderr, "cpp2uno_call:fpr=%p\n", ovrflw[nREG - MAX_FP_REGS]);
+#endif
+              pCppArgs[nPos] = &(ovrflw[nREG - MAX_FP_REGS]);
+              pUnoArgs[nPos] = &(ovrflw[nREG - MAX_FP_REGS]);
+            }
+            nREG++;
+            break;
+
+
+          default:
+            if (nREG < MAX_GP_REGS) {
+#ifdef BRDEBUG
+              fprintf(stderr, "cpp2uno_call:gpr=%p\n", gpreg[nREG]);
+#endif
+              pCppArgs[nPos] = &(gpreg[nREG]);
+              pUnoArgs[nPos] = &(gpreg[nREG]);
+            } else {
+#ifdef BRDEBUG
+              fprintf(stderr, "cpp2uno_call:gpr=%p\n", ovrflw[nREG - MAX_GP_REGS]);
+#endif
+              pCppArgs[nPos] = &(ovrflw[nREG - MAX_GP_REGS]);
+              pUnoArgs[nPos] = &(ovrflw[nREG - MAX_GP_REGS]);
+            }
+            nREG++;
+            break;
+
+        }
+        // no longer needed
+        TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+      }
+      else // ptr to complex value | ref
+      {
+#ifdef BRDEBUG
+        fprintf(stderr,"cpp2uno_call:ptr|ref\n");
+#endif
+        void *pCppStack;
+        if (nREG < MAX_GP_REGS) {
+          pCppArgs[nPos] = pCppStack = gpreg[nREG];
+        } else {
+          pCppArgs[nPos] = pCppStack = ovrflw[nREG - MAX_GP_REGS];
+        }
+        nREG++;
+#ifdef BRDEBUG
+        fprintf(stderr, "cpp2uno_call:pCppStack=%p\n", pCppStack);
+#endif
+
+        if (! rParam.bIn) // is pure out
+        {
+          // uno out is unconstructed mem!
+          pUnoArgs[nPos] = alloca( pParamTypeDescr->nSize );
+          pTempIndices[nTempIndices] = nPos;
+          // will be released at reconversion
+          ppTempParamTypeDescr[nTempIndices++] = pParamTypeDescr;
+        }
+        // is in/inout
+        else if (bridges::cpp_uno::shared::relatesToInterfaceType( pParamTypeDescr ))
+        {
+          uno_copyAndConvertData( pUnoArgs[nPos] = alloca( pParamTypeDescr->nSize ),
+              pCppStack, pParamTypeDescr,
+              pThis->getBridge()->getCpp2Uno() );
+          pTempIndices[nTempIndices] = nPos; // has to be reconverted
+          // will be released at reconversion
+          ppTempParamTypeDescr[nTempIndices++] = pParamTypeDescr;
+#ifdef BRDEBUG
+          fprintf(stderr, "cpp2uno_call:related to interface,%p,%d,pUnoargs[%d]=%p\n",
+                          pCppStack, pParamTypeDescr->nSize, nPos, pUnoArgs[nPos]);
+#endif
+        }
+        else // direct way
+        {
+          pUnoArgs[nPos] = pCppStack;
+#ifdef BRDEBUG
+          fprintf(stderr, "cpp2uno_call:direct,pUnoArgs[%d]=%p\n", nPos, pUnoArgs[nPos]);
+#endif
+          // no longer needed
+          TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+        }
+      }
+    }
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp2uno_call2,%p,unoargs=%p\n", pThis->getUnoI()->pDispatcher, pUnoArgs);
+#endif
+
+    // ExceptionHolder
+    uno_Any aUnoExc; // Any will be constructed by callee
+    uno_Any * pUnoExc = &aUnoExc;
+
+    // invoke uno dispatch call
+    (*pThis->getUnoI()->pDispatcher)( pThis->getUnoI(), pMemberTypeDescr, pUnoReturn, pUnoArgs, &pUnoExc );
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp2uno_call2,after dispatch\n");
+#endif
+
+    // in case an exception occurred...
+    if (pUnoExc)
+    {
+      // destruct temporary in/inout params
+      for ( ; nTempIndices--; )
+      {
+        sal_Int32 nIndex = pTempIndices[nTempIndices];
+
+        if (pParams[nIndex].bIn) // is in/inout => was constructed
+          uno_destructData( pUnoArgs[nIndex], ppTempParamTypeDescr[nTempIndices], 0 );
+        TYPELIB_DANGER_RELEASE( ppTempParamTypeDescr[nTempIndices] );
+      }
+      if (pReturnTypeDescr)
+        TYPELIB_DANGER_RELEASE( pReturnTypeDescr );
+
+      CPPU_CURRENT_NAMESPACE::raiseException( &aUnoExc, pThis->getBridge()->getUno2Cpp() );
+      // has to destruct the any
+      // is here for dummy
+      return typelib_TypeClass_VOID;
+    }
+    else // else no exception occurred...
+    {
+      // temporary params
+      for ( ; nTempIndices--; )
+      {
+        sal_Int32 nIndex = pTempIndices[nTempIndices];
+        typelib_TypeDescription * pParamTypeDescr = ppTempParamTypeDescr[nTempIndices];
+
+        if (pParams[nIndex].bOut) // inout/out
+        {
+          // convert and assign
+          uno_destructData( pCppArgs[nIndex], pParamTypeDescr, cpp_release );
+          uno_copyAndConvertData( pCppArgs[nIndex], pUnoArgs[nIndex], pParamTypeDescr,
+              pThis->getBridge()->getUno2Cpp() );
+        }
+        // destroy temp uno param
+        uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, 0 );
+
+        TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+      }
+      // return
+      if (pCppReturn) // has complex return
+      {
+        if (pUnoReturn != pCppReturn) // needs reconversion
+        {
+          uno_copyAndConvertData( pCppReturn, pUnoReturn, pReturnTypeDescr,
+              pThis->getBridge()->getUno2Cpp() );
+          // destroy temp uno return
+          uno_destructData( pUnoReturn, pReturnTypeDescr, 0 );
+        }
+        // complex return ptr is set to return reg
+        *(void **)pRegisterReturn = pCppReturn;
+      }
+      if (pReturnTypeDescr)
+      {
+        typelib_TypeClass eRet = (typelib_TypeClass)pReturnTypeDescr->eTypeClass;
+        TYPELIB_DANGER_RELEASE( pReturnTypeDescr );
+        return eRet;
+      }
+      else
+        return typelib_TypeClass_VOID;
+    }
+  }
+
+
+  /**
+   * is called on incoming vtable calls
+   * (called by asm snippets)
+   */
+  typelib_TypeClass cpp_vtable_call(
+      sal_Int32 nFunctionIndex,
+      sal_Int32 nVtableOffset,
+      void ** gpreg, void ** fpreg, void ** ovrflw,
+      sal_uInt64 * pRegisterReturn /* space for register return */ )
+  {
+    static_assert( sizeof(sal_Int64)==sizeof(void *), "### unexpected!" );
+
+#ifdef BRDEBUG
+    fprintf(stderr, "in cpp_vtable_call nFunctionIndex is %d\n", nFunctionIndex);
+    fprintf(stderr, "in cpp_vtable_call nVtableOffset is %d\n", nVtableOffset);
+    fprintf(stderr, "in cpp_vtable_call gp=%p, fp=%p, ov=%p\n", gpreg, fpreg, ovrflw);
+#endif
+
+    // gpreg:  [ret *], this, [other gpr params]
+    // fpreg:  [fpr params]
+    // ovrflw: [gpr or fpr params (properly aligned)]
+    void * pThis;
+    if (nFunctionIndex & 0x80000000 )
+    {
+      nFunctionIndex &= 0x7fffffff;
+      pThis = gpreg[1];
+    }
+    else
+    {
+      pThis = gpreg[0];
+    }
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call, pThis=%p, nFunctionIndex=%d, nVtableOffset=%d\n",
+                pThis, nFunctionIndex, nVtableOffset);
+#endif
+
+    pThis = static_cast< char * >(pThis) - nVtableOffset;
+    bridges::cpp_uno::shared::CppInterfaceProxy * pCppI =
+        bridges::cpp_uno::shared::CppInterfaceProxy::castInterfaceToProxy( pThis );
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call, pCppI=%p\n", pCppI);
+#endif
+
+    typelib_InterfaceTypeDescription * pTypeDescr = pCppI->getTypeDescr();
+
+    if (nFunctionIndex >= pTypeDescr->nMapFunctionIndexToMemberIndex)
+    {
+      SAL_WARN(
+          "bridges",
+          "illegal " << OUString::unacquired(&pTypeDescr->aBase.pTypeName)
+              << " vtable index " << nFunctionIndex << "/"
+              << pTypeDescr->nMapFunctionIndexToMemberIndex);
+      throw RuntimeException(
+          ("illegal " + OUString::unacquired(&pTypeDescr->aBase.pTypeName)
+           + " vtable index " + OUString::number(nFunctionIndex) + "/"
+           + OUString::number(pTypeDescr->nMapFunctionIndexToMemberIndex)),
+          (XInterface *)pThis);
+    }
+
+    // determine called method
+    sal_Int32 nMemberPos = pTypeDescr->pMapFunctionIndexToMemberIndex[nFunctionIndex];
+    assert(nMemberPos < pTypeDescr->nAllMembers);
+
+    TypeDescription aMemberDescr( pTypeDescr->ppAllMembers[nMemberPos] );
+
+#ifdef BRDEBUG
+    OString cstr( OUStringToOString( aMemberDescr.get()->pTypeName, RTL_TEXTENCODING_ASCII_US ) );
+    fprintf(stderr, "calling %s, nFunctionIndex=%d\n", cstr.getStr(), nFunctionIndex );
+#endif
+    typelib_TypeClass eRet;
+    switch (aMemberDescr.get()->eTypeClass)
+    {
+      case typelib_TypeClass_INTERFACE_ATTRIBUTE:
+        {
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call interface attribute\n");
+#endif
+          typelib_TypeDescriptionReference *pAttrTypeRef =
+              reinterpret_cast<typelib_InterfaceAttributeTypeDescription *>( aMemberDescr.get() )->pAttributeTypeRef;
+
+          if (pTypeDescr->pMapMemberIndexToFunctionIndex[nMemberPos] == nFunctionIndex)
+          {
+            // is GET method
+            eRet = cpp2uno_call( pCppI, aMemberDescr.get(), pAttrTypeRef,
+                0, 0, // no params
+                gpreg, fpreg, ovrflw, pRegisterReturn );
+          }
+          else
+          {
+            // is SET method
+            typelib_MethodParameter aParam;
+            aParam.pTypeRef = pAttrTypeRef;
+            aParam.bIn      = sal_True;
+            aParam.bOut     = sal_False;
+
+            eRet = cpp2uno_call( pCppI, aMemberDescr.get(),
+                0, // indicates void return
+                1, &aParam,
+                gpreg, fpreg, ovrflw, pRegisterReturn );
+          }
+          break;
+        }
+      case typelib_TypeClass_INTERFACE_METHOD:
+        {
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call interface method\n");
+#endif
+          // is METHOD
+          switch (nFunctionIndex)
+          {
+            case 1: // acquire()
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call method acquire\n");
+#endif
+              pCppI->acquireProxy(); // non virtual call!
+              eRet = typelib_TypeClass_VOID;
+              break;
+            case 2: // release()
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call method release\n");
+#endif
+              pCppI->releaseProxy(); // non virtual call!
+              eRet = typelib_TypeClass_VOID;
+              break;
+            case 0: // queryInterface() opt
+              {
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call method query interface opt\n");
+#endif
+                typelib_TypeDescription * pTD = 0;
+                TYPELIB_DANGER_GET( &pTD, reinterpret_cast< Type * >( gpreg[2] )->getTypeLibType() );
+                if (pTD)
+                {
+                  XInterface * pInterface = 0;
+                  (*pCppI->getBridge()->getCppEnv()->getRegisteredInterface)
+                      ( pCppI->getBridge()->getCppEnv(),
+                      (void **)&pInterface,
+                      pCppI->getOid().pData,
+                      reinterpret_cast<typelib_InterfaceTypeDescription *>( pTD ) );
+
+                  if (pInterface)
+                  {
+                    ::uno_any_construct( reinterpret_cast< uno_Any * >( gpreg[0] ),
+                                         &pInterface, pTD, cpp_acquire );
+
+                    pInterface->release();
+                    TYPELIB_DANGER_RELEASE( pTD );
+
+                    reinterpret_cast<void **>( pRegisterReturn )[0] = gpreg[0];
+                    eRet = typelib_TypeClass_ANY;
+                    break;
+                  }
+                  TYPELIB_DANGER_RELEASE( pTD );
+                }
+              } // else perform queryInterface()
+            default:
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call method query interface\n");
+#endif
+              typelib_InterfaceMethodTypeDescription *pMethodTD =
+                  reinterpret_cast<typelib_InterfaceMethodTypeDescription *>( aMemberDescr.get() );
+
+              eRet = cpp2uno_call( pCppI, aMemberDescr.get(),
+                  pMethodTD->pReturnTypeRef,
+                  pMethodTD->nParams,
+                  pMethodTD->pParams,
+                  gpreg, fpreg, ovrflw, pRegisterReturn );
+          }
+          break;
+        }
+      default:
+        {
+#ifdef BRDEBUG
+    fprintf(stderr, "cpp_vtable_call no member\n");
+#endif
+          throw RuntimeException( "no member description found!", (XInterface *)pThis );
+        }
+    }
+
+    return eRet;
+  }
+
+  extern "C" void privateSnippetExecutor( ... );
+
+  int const codeSnippetSize = 0x44;
+
+  unsigned char *  codeSnippet( unsigned char * code,
+      sal_Int32 functionIndex, sal_Int32 vtableOffset,
+      bool bHasHiddenParam )
+  {
+#ifdef BRDEBUG
+     fprintf(stderr,"in codeSnippet functionIndex is %d\n", functionIndex);
+     fprintf(stderr,"in codeSnippet vtableOffset is %d\n", vtableOffset);
+     fflush(stderr);
+#endif
+
+    if ( bHasHiddenParam )
+      functionIndex |= 0x80000000;
+
+    unsigned int * p = (unsigned int *) code;
+
+    assert((((unsigned long)code) & 0x3) == 0 );  //aligned to 4 otherwise a mistake
+
+    /* generate this code */
+    /*
+       # index
+        0:   3c020000        lui     v0,0x0
+        4:   34420000        ori     v0,v0,0x0
+       # privateSnippetExecutor
+        8:   3c0c0000        lui     t0,0x0
+        c:   358c0000        ori     t0,t0,0x0
+       10:   000c6438        dsll    t0,t0,0x10
+       14:   358c0000        ori     t0,t0,0x0
+       18:   000c6438        dsll    t0,t0,0x10
+       1c:   358c0000        ori     t0,t0,0x0
+       # cpp_vtable_call
+       20:   3c190000        lui     t9,0x0
+       24:   37390000        ori     t9,t9,0x0
+       28:   0019cc38        dsll    t9,t9,0x10
+       2c:   37390000        ori     t9,t9,0x0
+       30:   0019cc38        dsll    t9,t9,0x10
+       34:   37390000        ori     t9,t9,0x0
+       # offset
+       38:   3c030000        lui     v1,0x0
+       3c:   01800008        jr      t0
+       40:   34630000        ori     v1,v1,0x0
+     */
+
+    * p++ = 0x3c020000 | ((functionIndex>>16) & 0x0000ffff);
+    * p++ = 0x34420000 | (functionIndex & 0x0000ffff);
+    * p++ = 0x3c0c0000 | ((((unsigned long)privateSnippetExecutor) >> 48) & 0x0000ffff);
+    * p++ = 0x358c0000 | ((((unsigned long)privateSnippetExecutor) >> 32) & 0x0000ffff);
+    * p++ = 0x000c6438;
+    * p++ = 0x358c0000 | ((((unsigned long)privateSnippetExecutor) >> 16) & 0x0000ffff);
+    * p++ = 0x000c6438;
+    * p++ = 0x358c0000 | (((unsigned long)privateSnippetExecutor) & 0x0000ffff);
+    * p++ = 0x3c190000 | ((((unsigned long)cpp_vtable_call) >> 48) & 0x0000ffff);
+    * p++ = 0x37390000 | ((((unsigned long)cpp_vtable_call) >> 32) & 0x0000ffff);
+    * p++ = 0x0019cc38;
+    * p++ = 0x37390000 | ((((unsigned long)cpp_vtable_call) >> 16) & 0x0000ffff);
+    * p++ = 0x0019cc38;
+    * p++ = 0x37390000 | (((unsigned long)cpp_vtable_call) & 0x0000ffff);
+    * p++ = 0x3c030000 | ((vtableOffset>>16) & 0x0000ffff);
+    * p++ = 0x01800008;
+    * p++ = 0x34630000 | (vtableOffset & 0x0000ffff);
+    return (code + codeSnippetSize);
+
+  }
+
+}
+
+
+void bridges::cpp_uno::shared::VtableFactory::flushCode(unsigned char const *bptr, unsigned char const *eptr)
+{
+// vimer fix
+#ifdef ANDROID
+  (void) bptr;
+  (void) eptr;
+  sysmips(FLUSH_CACHE, 0, 0, 0);
+#else
+  //cacheflush((long) bptr, (long) eptr, 0);
+  ;
+#endif
+}
+
+struct bridges::cpp_uno::shared::VtableFactory::Slot { void * fn; };
+
+bridges::cpp_uno::shared::VtableFactory::Slot *
+bridges::cpp_uno::shared::VtableFactory::mapBlockToVtable(void * block)
+{
+    return static_cast< Slot * >(block) + 2;
+}
+
+
+std::size_t bridges::cpp_uno::shared::VtableFactory::getBlockSize(
+    sal_Int32 slotCount)
+{
+    return (slotCount + 2) * sizeof (Slot) + slotCount * codeSnippetSize;
+}
+
+bridges::cpp_uno::shared::VtableFactory::Slot *
+bridges::cpp_uno::shared::VtableFactory::initializeBlock(
+    void * block, sal_Int32 slotCount, sal_Int32,
+    typelib_InterfaceTypeDescription *)
+{
+    Slot * slots = mapBlockToVtable(block);
+    slots[-2].fn = 0; //null
+    slots[-1].fn = 0; //destructor
+    return slots + slotCount;
+}
+
+unsigned char * bridges::cpp_uno::shared::VtableFactory::addLocalFunctions(
+    Slot ** slots, unsigned char * code, sal_PtrDiff writetoexecdiff,
+    typelib_InterfaceTypeDescription const * type, sal_Int32 functionOffset,
+    sal_Int32 functionCount, sal_Int32 vtableOffset)
+{
+   (*slots) -= functionCount;
+    Slot * s = *slots;
+
+#ifdef BRDEBUG
+   fprintf(stderr, "in addLocalFunctions functionOffset is %d\n", functionOffset);
+   fprintf(stderr, "in addLocalFunctions vtableOffset is %d\n", vtableOffset);
+   fprintf(stderr, "nMembers=%d\n", type->nMembers);
+   fflush(stderr);
+#endif
+
+  for (sal_Int32 i = 0; i < type->nMembers; ++i) {
+    typelib_TypeDescription * member = 0;
+    TYPELIB_DANGER_GET(&member, type->ppMembers[i]);
+    assert(member != 0);
+    switch (member->eTypeClass) {
+      case typelib_TypeClass_INTERFACE_ATTRIBUTE:
+        // Getter:
+        (s++)->fn = code + writetoexecdiff;
+        code = codeSnippet(
+            code, functionOffset++, vtableOffset,
+            CPPU_CURRENT_NAMESPACE::return_in_hidden_param(
+              reinterpret_cast<
+              typelib_InterfaceAttributeTypeDescription * >(
+                member)->pAttributeTypeRef));
+
+        // Setter:
+        if (!reinterpret_cast<
+            typelib_InterfaceAttributeTypeDescription * >(
+              member)->bReadOnly)
+        {
+          (s++)->fn = code + writetoexecdiff;
+          code = codeSnippet(code, functionOffset++, vtableOffset, false);
+        }
+        break;
+
+      case typelib_TypeClass_INTERFACE_METHOD:
+        (s++)->fn = code + writetoexecdiff;
+        code = codeSnippet(
+            code, functionOffset++, vtableOffset,
+            CPPU_CURRENT_NAMESPACE::return_in_hidden_param(
+              reinterpret_cast<
+              typelib_InterfaceMethodTypeDescription * >(
+                member)->pReturnTypeRef));
+        break;
+
+      default:
+        assert(false);
+        break;
+    }
+    TYPELIB_DANGER_RELEASE(member);
+  }
+  return code;
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/except.cxx b/bridges/source/cpp_uno/gcc3_linux_riscv64/except.cxx
new file mode 100755
index 000000000..ca94243d0
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/except.cxx
@@ -0,0 +1,290 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+#include <stdio.h>
+#include <string.h>
+#include <dlfcn.h>
+#include <cxxabi.h>
+#include <rtl/strbuf.hxx>
+#include <rtl/ustrbuf.hxx>
+#include <sal/log.hxx>
+#include <osl/mutex.hxx>
+
+#include <com/sun/star/uno/genfunc.hxx>
+#include <typelib/typedescription.hxx>
+#include <uno/any2.h>
+
+#include <unordered_map>
+#include "share.hxx"
+
+
+using namespace ::std;
+using namespace ::osl;
+using namespace ::com::sun::star::uno;
+using namespace ::__cxxabiv1;
+
+
+namespace CPPU_CURRENT_NAMESPACE
+{
+
+void dummy_can_throw_anything( char const * )
+{
+}
+
+static OUString toUNOname( char const * p )
+{
+#if defined BRIDGES_DEBUG
+    char const * start = p;
+#endif
+
+    // example: N3com3sun4star4lang24IllegalArgumentExceptionE
+
+    OUStringBuffer buf( 64 );
+    assert( 'N' == *p );
+    ++p; // skip N
+
+    while ('E' != *p)
+    {
+        // read chars count
+        long n = (*p++ - '0');
+        while ('0' <= *p && '9' >= *p)
+        {
+            n *= 10;
+            n += (*p++ - '0');
+        }
+        buf.appendAscii( p, n );
+        p += n;
+        if ('E' != *p)
+            buf.append( '.' );
+    }
+
+#if defined BRIDGES_DEBUG
+    OUString ret( buf.makeStringAndClear() );
+    OString c_ret( OUStringToOString( ret, RTL_TEXTENCODING_ASCII_US ) );
+    fprintf( stderr, "> toUNOname(): %s => %s\n", start, c_ret.getStr() );
+    return ret;
+#else
+    return buf.makeStringAndClear();
+#endif
+}
+
+class RTTI
+{
+    typedef std::unordered_map< OUString, type_info * > t_rtti_map;
+
+    Mutex m_mutex;
+    t_rtti_map m_rttis;
+    t_rtti_map m_generatedRttis;
+
+    void * m_hApp;
+
+public:
+    RTTI();
+    ~RTTI();
+
+    type_info * getRTTI( typelib_CompoundTypeDescription * );
+};
+
+RTTI::RTTI()
+    : m_hApp( dlopen( 0, RTLD_LAZY ) )
+{
+}
+
+RTTI::~RTTI()
+{
+    dlclose( m_hApp );
+}
+
+
+type_info * RTTI::getRTTI( typelib_CompoundTypeDescription *pTypeDescr )
+{
+    type_info * rtti;
+
+    OUString const & unoName = *(OUString const *)&pTypeDescr->aBase.pTypeName;
+
+    MutexGuard guard( m_mutex );
+    t_rtti_map::const_iterator iRttiFind( m_rttis.find( unoName ) );
+    if (iRttiFind == m_rttis.end())
+    {
+        // RTTI symbol
+        OStringBuffer buf( 64 );
+        buf.append( "_ZTIN" );
+        sal_Int32 index = 0;
+        do
+        {
+            OUString token( unoName.getToken( 0, '.', index ) );
+            buf.append( token.getLength() );
+            OString c_token( OUStringToOString( token, RTL_TEXTENCODING_ASCII_US ) );
+            buf.append( c_token );
+        }
+        while (index >= 0);
+        buf.append( 'E' );
+
+        OString symName( buf.makeStringAndClear() );
+        rtti = (type_info *)dlsym( m_hApp, symName.getStr() );
+
+        if (rtti)
+        {
+            pair< t_rtti_map::iterator, bool > insertion(
+                m_rttis.insert( t_rtti_map::value_type( unoName, rtti ) ) );
+            assert(insertion.second && "### inserting new rtti failed?!");
+        }
+        else
+        {
+            // try to lookup the symbol in the generated rtti map
+            t_rtti_map::const_iterator iFind( m_generatedRttis.find( unoName ) );
+            if (iFind == m_generatedRttis.end())
+            {
+                // we must generate it !
+                // symbol and rtti-name is nearly identical,
+                // the symbol is prefixed with _ZTI
+                char const * rttiName = symName.getStr() +4;
+#if defined BRIDGES_DEBUG
+                fprintf( stderr,"generated rtti for %s\n", rttiName );
+#endif
+                if (pTypeDescr->pBaseTypeDescription)
+                {
+                    // ensure availability of base
+                    type_info * base_rtti = getRTTI(
+                        (typelib_CompoundTypeDescription *)pTypeDescr->pBaseTypeDescription );
+                    rtti = new __si_class_type_info(
+                        strdup( rttiName ), (__class_type_info *)base_rtti );
+                }
+                else
+                {
+                    // this class has no base class
+                    rtti = new __class_type_info( strdup( rttiName ) );
+                }
+
+                pair< t_rtti_map::iterator, bool > insertion(
+                    m_generatedRttis.insert( t_rtti_map::value_type( unoName, rtti ) ) );
+                assert(insertion.second && "### inserting new generated rtti failed?!");
+            }
+            else // taking already generated rtti
+            {
+                rtti = iFind->second;
+            }
+        }
+    }
+    else
+    {
+        rtti = iRttiFind->second;
+    }
+
+    return rtti;
+}
+
+
+static void deleteException( void * pExc )
+{
+    __cxa_exception const * header = ((__cxa_exception const *)pExc - 1);
+    typelib_TypeDescription * pTD = 0;
+    OUString unoName( toUNOname( header->exceptionType->name() ) );
+    ::typelib_typedescription_getByName( &pTD, unoName.pData );
+    assert(pTD && "### unknown exception type! leaving out destruction => leaking!!!");
+    if (pTD)
+    {
+        ::uno_destructData( pExc, pTD, cpp_release );
+        ::typelib_typedescription_release( pTD );
+    }
+}
+
+void raiseException( uno_Any * pUnoExc, uno_Mapping * pUno2Cpp )
+{
+#if defined BRIDGES_DEBUG
+    OString cstr(
+        OUStringToOString(
+            OUString::unacquired( &pUnoExc->pType->pTypeName ),
+            RTL_TEXTENCODING_ASCII_US ) );
+    fprintf( stderr, "> uno exception occurred: %s\n", cstr.getStr() );
+#endif
+    void * pCppExc;
+    type_info * rtti;
+
+    {
+    // construct cpp exception object
+    typelib_TypeDescription * pTypeDescr = 0;
+    TYPELIB_DANGER_GET( &pTypeDescr, pUnoExc->pType );
+    assert(pTypeDescr);
+    if (! pTypeDescr)
+    {
+        throw RuntimeException(
+            OUString("cannot get typedescription for type ") +
+            OUString::unacquired( &pUnoExc->pType->pTypeName ) );
+    }
+
+    pCppExc = __cxa_allocate_exception( pTypeDescr->nSize );
+    ::uno_copyAndConvertData( pCppExc, pUnoExc->pData, pTypeDescr, pUno2Cpp );
+
+    // destruct uno exception
+    ::uno_any_destruct( pUnoExc, 0 );
+    // avoiding locked counts
+    static RTTI rtti_data;
+    rtti = (type_info*)rtti_data.getRTTI((typelib_CompoundTypeDescription*)pTypeDescr);
+    TYPELIB_DANGER_RELEASE( pTypeDescr );
+    assert(rtti && "### no rtti for throwing exception!");
+    if (! rtti)
+    {
+        throw RuntimeException(
+            OUString("no rtti for type ") +
+            OUString::unacquired( &pUnoExc->pType->pTypeName ) );
+    }
+    }
+
+    __cxa_throw( pCppExc, rtti, deleteException );
+}
+
+void fillUnoException(uno_Any * pUnoExc, uno_Mapping * pCpp2Uno)
+{
+    __cxa_exception * header = __cxa_get_globals()->caughtExceptions;
+    if (! header)
+    {
+        RuntimeException aRE( "no exception header!" );
+        Type const & rType = cppu::UnoType<decltype(aRE)>::get();
+        uno_type_any_constructAndConvert( pUnoExc, &aRE, rType.getTypeLibType(), pCpp2Uno );
+        SAL_WARN("bridges", aRE.Message);
+        return;
+    }
+
+    std::type_info *exceptionType = __cxa_current_exception_type();
+
+    typelib_TypeDescription * pExcTypeDescr = 0;
+    OUString unoName( toUNOname( exceptionType->name() ) );
+#if defined BRIDGES_DEBUG
+    OString cstr_unoName( OUStringToOString( unoName, RTL_TEXTENCODING_ASCII_US ) );
+    fprintf( stderr, "> c++ exception occurred: %s\n", cstr_unoName.getStr() );
+#endif
+    typelib_typedescription_getByName( &pExcTypeDescr, unoName.pData );
+    if (0 == pExcTypeDescr)
+    {
+        RuntimeException aRE( OUString("exception type not found: ") + unoName );
+        Type const & rType = cppu::UnoType<decltype(aRE)>::get();
+        uno_type_any_constructAndConvert( pUnoExc, &aRE, rType.getTypeLibType(), pCpp2Uno );
+        SAL_WARN("bridges", aRE.Message);
+    }
+    else
+    {
+        // construct uno exception any
+        uno_any_constructAndConvert( pUnoExc, header->adjustedPtr, pExcTypeDescr, pCpp2Uno );
+        typelib_typedescription_release( pExcTypeDescr );
+    }
+}
+
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/share.hxx b/bridges/source/cpp_uno/gcc3_linux_riscv64/share.hxx
new file mode 100755
index 000000000..ee2235e4f
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/share.hxx
@@ -0,0 +1,89 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+#pragma once
+
+#include "uno/mapping.h"
+
+#include <typeinfo>
+#include <exception>
+#include <cstddef>
+
+#define MAX_GP_REGS    (8)
+#define MAX_FP_REGS    (8)
+
+namespace CPPU_CURRENT_NAMESPACE
+{
+
+  void dummy_can_throw_anything( char const * );
+
+
+// ----- following decl from libstdc++-v3/libsupc++/unwind-cxx.h and unwind.h
+
+struct _Unwind_Exception
+{
+    unsigned exception_class __attribute__((__mode__(__DI__)));
+    void * exception_cleanup;
+    unsigned private_1 __attribute__((__mode__(__word__)));
+    unsigned private_2 __attribute__((__mode__(__word__)));
+} __attribute__((__aligned__));
+
+struct __cxa_exception
+{
+    std::type_info *exceptionType;
+    void (*exceptionDestructor)(void *);
+
+    void (*unexpectedHandler)(); // std::unexpected_handler dropped from C++17
+    std::terminate_handler terminateHandler;
+
+    __cxa_exception *nextException;
+
+    int handlerCount;
+
+    int handlerSwitchValue;
+    const unsigned char *actionRecord;
+    const unsigned char *languageSpecificData;
+    void *catchTemp;
+    void *adjustedPtr;
+
+    _Unwind_Exception unwindHeader;
+};
+
+extern "C" void *__cxa_allocate_exception(
+    std::size_t thrown_size ) throw();
+extern "C" void __cxa_throw (
+    void *thrown_exception, std::type_info *tinfo, void (*dest) (void *) ) __attribute__((noreturn));
+
+struct __cxa_eh_globals
+{
+    __cxa_exception *caughtExceptions;
+    unsigned int uncaughtExceptions;
+};
+
+extern "C" __cxa_eh_globals *__cxa_get_globals () throw();
+extern "C" std::type_info *__cxa_current_exception_type() throw();
+
+void raiseException(
+    uno_Any * pUnoExc, uno_Mapping * pUno2Cpp );
+
+void fillUnoException(uno_Any *, uno_Mapping * pCpp2Uno);
+
+bool return_in_hidden_param( typelib_TypeDescriptionReference *pTypeRef );
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/bridges/source/cpp_uno/gcc3_linux_riscv64/uno2cpp.cxx b/bridges/source/cpp_uno/gcc3_linux_riscv64/uno2cpp.cxx
new file mode 100755
index 000000000..a42070bcd
--- /dev/null
+++ b/bridges/source/cpp_uno/gcc3_linux_riscv64/uno2cpp.cxx
@@ -0,0 +1,561 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This file is part of the LibreOffice project.
+ *
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ *
+ * This file incorporates work covered by the following license notice:
+ *
+ *   Licensed to the Apache Software Foundation (ASF) under one or more
+ *   contributor license agreements. See the NOTICE file distributed
+ *   with this work for additional information regarding copyright
+ *   ownership. The ASF licenses this file to you under the Apache
+ *   License, Version 2.0 (the "License"); you may not use this file
+ *   except in compliance with the License. You may obtain a copy of
+ *   the License at http://www.apache.org/licenses/LICENSE-2.0 .
+ */
+
+#include <sal/config.h>
+
+#include <exception>
+#include <malloc.h>
+#include <cstring>
+#include <typeinfo>
+
+#include <com/sun/star/uno/Exception.hpp>
+#include <com/sun/star/uno/RuntimeException.hpp>
+#include <com/sun/star/uno/genfunc.hxx>
+#include <o3tl/runtimetooustring.hxx>
+#include <uno/data.h>
+
+#include "bridge.hxx"
+#include "types.hxx"
+#include "unointerfaceproxy.hxx"
+#include "vtables.hxx"
+
+#include "share.hxx"
+
+//#define BRDEBUG
+#ifdef BRDEBUG
+#include <stdio.h>
+#endif
+
+#define INSERT_FLOAT_DOUBLE( pSV, nr, pFPR, pDS ) \
+    if ( nr < MAX_FP_REGS ) \
+        pFPR[nr++] = *reinterpret_cast<double *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_uInt64 *>( pSV ); // verbatim!
+
+#define INSERT_INT64( pSV, nr, pGPR, pDS ) \
+    if ( nr < MAX_GP_REGS ) \
+        pGPR[nr++] = *reinterpret_cast<sal_Int64 *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_Int64 *>( pSV );
+
+#define INSERT_INT32( pSV, nr, pGPR, pDS ) \
+    if ( nr < MAX_GP_REGS ) \
+        pGPR[nr++] = *reinterpret_cast<sal_Int32 *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_Int32 *>( pSV );
+
+#define INSERT_INT16( pSV, nr, pGPR, pDS ) \
+    if ( nr < MAX_GP_REGS ) \
+        pGPR[nr++] = *reinterpret_cast<sal_Int16 *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_Int16 *>( pSV );
+
+#define INSERT_UINT16( pSV, nr, pGPR, pDS ) \
+    if ( nr < MAX_GP_REGS ) \
+        pGPR[nr++] = *reinterpret_cast<sal_uInt16 *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_uInt16 *>( pSV );
+
+#define INSERT_INT8( pSV, nr, pGPR, pDS ) \
+    if ( nr < MAX_GP_REGS ) \
+        pGPR[nr++] = *reinterpret_cast<sal_Int8 *>( pSV ); \
+    else \
+        *pDS++ = *reinterpret_cast<sal_Int8 *>( pSV );
+
+using namespace ::com::sun::star::uno;
+
+namespace
+{
+
+  bool isReturnInFPR(const typelib_TypeDescription * pTypeDescr, sal_uInt32 & nSize)
+  {
+      const typelib_CompoundTypeDescription *p =
+                  reinterpret_cast<const typelib_CompoundTypeDescription*>( pTypeDescr );
+
+      for (sal_Int32 i = 0; i < p->nMembers; ++i)
+      {
+          typelib_TypeDescriptionReference *pTypeInStruct = p->ppTypeRefs[ i ];
+
+          switch (pTypeInStruct->eTypeClass)
+          {
+          case typelib_TypeClass_STRUCT:
+          case typelib_TypeClass_EXCEPTION:
+              {
+                  typelib_TypeDescription * t = 0;
+                  TYPELIB_DANGER_GET(&t, pTypeInStruct);
+                  bool isFPR = isReturnInFPR(t, nSize);
+                  TYPELIB_DANGER_RELEASE(t);
+                  if (!isFPR)
+                    return false;
+              }
+              break;
+          case typelib_TypeClass_FLOAT:
+          case typelib_TypeClass_DOUBLE:
+              if (nSize >= 16)
+                return false;
+              nSize += 8;
+              break;
+          default:
+              return false;
+          }
+      }
+      return true;
+  }
+
+  void fillReturn(const typelib_TypeDescription * pTypeDescr,
+                    sal_Int64 * gret, double * fret, void * pRegisterReturn)
+  {
+      sal_uInt32 nSize = 0;
+      if (isReturnInFPR(pTypeDescr, nSize))
+      {
+          reinterpret_cast<double *>( pRegisterReturn )[0] = fret[0];
+          reinterpret_cast<double *>( pRegisterReturn )[1] = fret[1];
+      }
+      else
+      {
+          reinterpret_cast<sal_Int64 *>( pRegisterReturn )[0] = gret[0];
+          reinterpret_cast<sal_Int64 *>( pRegisterReturn )[1] = gret[1];
+      }
+  }
+
+  static void callVirtualMethod(
+      void * pAdjustedThisPtr,
+      sal_Int32 nVtableIndex,
+      void * pRegisterReturn,
+      typelib_TypeDescriptionReference * pReturnTypeRef,
+      bool bSimpleReturn,
+      sal_uInt64 *pStack,
+      sal_uInt32 nStack,
+      sal_uInt64 *pGPR,
+      double *pFPR,
+      sal_uInt32 nREG)
+  {
+    // Should not happen, but...
+    static_assert(MAX_GP_REGS == MAX_FP_REGS, "must be the same size");
+    if ( nREG > MAX_GP_REGS )
+        nREG = MAX_GP_REGS;
+
+    // Get pointer to method
+    sal_uInt64 pMethod = *((sal_uInt64 *)pAdjustedThisPtr);
+    pMethod += 8 * nVtableIndex;
+    void *mfunc = (void *) *((sal_uInt64 *)pMethod);
+#ifdef BRDEBUG
+    fprintf(stderr, "calling function %p\n", mfunc);
+#endif
+
+    // Load parameters to stack, if necessary
+    sal_uInt64* pCallStack = NULL;
+    if ( nStack )
+    {
+        // 16-bytes aligned
+        sal_uInt32 nStackBytes = ( ( nStack + 1 ) >> 1 ) * 16;
+        pCallStack = (sal_uInt64 *) __builtin_alloca( nStackBytes );
+        std::memcpy( pCallStack, pStack, nStackBytes );
+    }
+
+    sal_Int64 gret[2];
+    double fret[2];
+    // 
+    __asm__ __volatile__ (
+		     "csrr %0, 0x141\n\t"\
+                     "add %0, %0, 4\n\t"\
+		     "csrw 0x141, %0"
+		     : "+r" (mfunc)
+		     :
+		     : "memory");
+    switch (pReturnTypeRef->eTypeClass)
+    {
+    case typelib_TypeClass_HYPER:
+    case typelib_TypeClass_UNSIGNED_HYPER:
+    case typelib_TypeClass_LONG:
+    case typelib_TypeClass_UNSIGNED_LONG:
+    case typelib_TypeClass_ENUM:
+    case typelib_TypeClass_CHAR:
+    case typelib_TypeClass_SHORT:
+    case typelib_TypeClass_UNSIGNED_SHORT:
+    case typelib_TypeClass_BOOLEAN:
+    case typelib_TypeClass_BYTE:
+        *reinterpret_cast<sal_Int64 *>( pRegisterReturn ) = gret[0];
+        break;
+    case typelib_TypeClass_FLOAT:
+    case typelib_TypeClass_DOUBLE:
+        *reinterpret_cast<double *>( pRegisterReturn ) = fret[0];
+        break;
+    case typelib_TypeClass_STRUCT:
+    case typelib_TypeClass_EXCEPTION:
+        {
+            sal_Int32 const nRetSize = pReturnTypeRef->pType->nSize;
+            if (bSimpleReturn && nRetSize <= 16 && nRetSize > 0)
+            {
+                typelib_TypeDescription * pTypeDescr = 0;
+                TYPELIB_DANGER_GET( &pTypeDescr, pReturnTypeRef );
+                fillReturn(pTypeDescr, gret, fret, pRegisterReturn);
+                TYPELIB_DANGER_RELEASE( pTypeDescr );
+            }
+            break;
+        }
+    default:
+#ifdef BRDEBUG
+        fprintf(stderr,"unhandled return type %u\n", pReturnTypeRef->eTypeClass);
+#endif
+        break;
+    }
+  }
+
+
+  static void cpp_call(
+      bridges::cpp_uno::shared::UnoInterfaceProxy * pThis,
+      bridges::cpp_uno::shared::VtableSlot  aVtableSlot,
+      typelib_TypeDescriptionReference * pReturnTypeRef,
+      sal_Int32 nParams, typelib_MethodParameter * pParams,
+      void * pUnoReturn, void * pUnoArgs[], uno_Any ** ppUnoExc )
+  {
+    // max space for: [complex ret ptr], values|ptr ...
+    sal_uInt64 *pStack = (sal_uInt64 *)__builtin_alloca( ((nParams+3) * sizeof(sal_Int64)) );
+    sal_uInt64 *pStackStart = pStack;
+
+    sal_uInt64 pGPR[MAX_GP_REGS];
+    double pFPR[MAX_FP_REGS];
+    sal_uInt32 nREG = 0;
+
+#ifdef BRDEBUG
+  fprintf(stderr, "in cpp_call\n");
+#endif
+
+    // return
+    typelib_TypeDescription * pReturnTypeDescr = 0;
+    TYPELIB_DANGER_GET( &pReturnTypeDescr, pReturnTypeRef );
+    assert(pReturnTypeDescr);
+
+    void * pCppReturn = 0; // if != 0 && != pUnoReturn, needs reconversion
+
+    bool bSimpleReturn = true;
+    if (pReturnTypeDescr)
+    {
+      if ( CPPU_CURRENT_NAMESPACE::return_in_hidden_param( pReturnTypeRef ) )
+      {
+        bSimpleReturn = false;
+        // complex return via ptr
+        pCppReturn = bridges::cpp_uno::shared::relatesToInterfaceType( pReturnTypeDescr )?
+                     __builtin_alloca( pReturnTypeDescr->nSize ) : pUnoReturn;
+        INSERT_INT64( &pCppReturn, nREG, pGPR, pStack );
+      }
+      else
+      {
+        pCppReturn = pUnoReturn; // direct way for simple types
+      }
+    }
+
+    // push this
+    void* pAdjustedThisPtr = reinterpret_cast< void **>( pThis->getCppI() ) + aVtableSlot.offset;
+    INSERT_INT64( &pAdjustedThisPtr, nREG, pGPR, pStack );
+
+    // args
+    void ** pCppArgs  = (void **)alloca( 3 * sizeof(void *) * nParams );
+    // indices of values this have to be converted (interface conversion cpp<=>uno)
+    sal_Int32 * pTempIndices = (sal_Int32 *)(pCppArgs + nParams);
+    // type descriptions for reconversions
+    typelib_TypeDescription ** ppTempParamTypeDescr = (typelib_TypeDescription **)(pCppArgs + (2 * nParams));
+
+    sal_Int32 nTempIndices   = 0;
+
+    for ( sal_Int32 nPos = 0; nPos < nParams; ++nPos )
+    {
+      const typelib_MethodParameter & rParam = pParams[nPos];
+      typelib_TypeDescription * pParamTypeDescr = 0;
+      TYPELIB_DANGER_GET( &pParamTypeDescr, rParam.pTypeRef );
+
+      if (!rParam.bOut && bridges::cpp_uno::shared::isSimpleType( pParamTypeDescr ))
+      {
+        uno_copyAndConvertData( pCppArgs[nPos] = alloca( 8 ), pUnoArgs[nPos], pParamTypeDescr,
+            pThis->getBridge()->getUno2Cpp() );
+
+        switch (pParamTypeDescr->eTypeClass)
+        {
+          case typelib_TypeClass_LONG:
+          case typelib_TypeClass_UNSIGNED_LONG:
+          case typelib_TypeClass_ENUM:
+            INSERT_INT32( pCppArgs[nPos], nREG, pGPR, pStack );
+            break;
+          case typelib_TypeClass_CHAR:
+          case typelib_TypeClass_SHORT:
+            INSERT_INT16( pCppArgs[nPos], nREG, pGPR, pStack );
+            break;
+          case typelib_TypeClass_UNSIGNED_SHORT:
+            INSERT_UINT16( pCppArgs[nPos], nREG, pGPR, pStack );
+            break;
+          case typelib_TypeClass_BOOLEAN:
+          case typelib_TypeClass_BYTE:
+            INSERT_INT8( pCppArgs[nPos], nREG, pGPR, pStack );
+            break;
+          case typelib_TypeClass_FLOAT:
+          case typelib_TypeClass_DOUBLE:
+            INSERT_FLOAT_DOUBLE( pCppArgs[nPos], nREG, pFPR, pStack );
+            break;
+          case typelib_TypeClass_HYPER:
+          case typelib_TypeClass_UNSIGNED_HYPER:
+            INSERT_INT64( pCppArgs[nPos], nREG, pGPR, pStack );
+            break;
+          default:
+            break;
+        }
+
+        // no longer needed
+        TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+      }
+      else // ptr to complex value | ref
+      {
+        if (! rParam.bIn) // is pure out
+        {
+          // cpp out is constructed mem, uno out is not!
+          uno_constructData(
+              pCppArgs[nPos] = alloca( pParamTypeDescr->nSize ),
+              pParamTypeDescr );
+          pTempIndices[nTempIndices] = nPos; // default constructed for cpp call
+          // will be released at reconversion
+          ppTempParamTypeDescr[nTempIndices++] = pParamTypeDescr;
+        }
+        // is in/inout
+        else if (bridges::cpp_uno::shared::relatesToInterfaceType( pParamTypeDescr ))
+        {
+          uno_copyAndConvertData(
+              pCppArgs[nPos] = alloca( pParamTypeDescr->nSize ),
+              pUnoArgs[nPos], pParamTypeDescr, pThis->getBridge()->getUno2Cpp() );
+
+          pTempIndices[nTempIndices] = nPos; // has to be reconverted
+          // will be released at reconversion
+          ppTempParamTypeDescr[nTempIndices++] = pParamTypeDescr;
+        }
+        else // direct way
+        {
+          pCppArgs[nPos] = pUnoArgs[nPos];
+          // no longer needed
+          TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+        }
+        INSERT_INT64( &(pCppArgs[nPos]), nREG, pGPR, pStack );
+      }
+    }
+
+    try
+    {
+      try {
+          callVirtualMethod(
+              pAdjustedThisPtr, aVtableSlot.index,
+              pCppReturn, pReturnTypeRef, bSimpleReturn,
+              pStackStart, ( pStack - pStackStart ),
+              pGPR, pFPR, nREG);
+      } catch (css::uno::Exception &) {
+          throw;
+      } catch (std::exception & e) {
+          throw css::uno::RuntimeException(
+              "C++ code threw " + o3tl::runtimeToOUString(typeid(e).name()) + ": "
+              + o3tl::runtimeToOUString(e.what()));
+      } catch (...) {
+          throw css::uno::RuntimeException("C++ code threw unknown exception");
+      }
+      // NO exception occurred...
+      *ppUnoExc = 0;
+
+      // reconvert temporary params
+      for ( ; nTempIndices--; )
+      {
+        sal_Int32 nIndex = pTempIndices[nTempIndices];
+        typelib_TypeDescription * pParamTypeDescr = ppTempParamTypeDescr[nTempIndices];
+
+        if (pParams[nIndex].bIn)
+        {
+          if (pParams[nIndex].bOut) // inout
+          {
+            uno_destructData( pUnoArgs[nIndex], pParamTypeDescr, 0 ); // destroy uno value
+            uno_copyAndConvertData( pUnoArgs[nIndex], pCppArgs[nIndex], pParamTypeDescr,
+                pThis->getBridge()->getCpp2Uno() );
+          }
+        }
+        else // pure out
+        {
+          uno_copyAndConvertData( pUnoArgs[nIndex], pCppArgs[nIndex], pParamTypeDescr,
+              pThis->getBridge()->getCpp2Uno() );
+        }
+        // destroy temp cpp param => cpp: every param was constructed
+        uno_destructData( pCppArgs[nIndex], pParamTypeDescr, cpp_release );
+
+        TYPELIB_DANGER_RELEASE( pParamTypeDescr );
+      }
+      // return value
+      if (pCppReturn && pUnoReturn != pCppReturn)
+      {
+        uno_copyAndConvertData( pUnoReturn, pCppReturn, pReturnTypeDescr,
+            pThis->getBridge()->getCpp2Uno() );
+        uno_destructData( pCppReturn, pReturnTypeDescr, cpp_release );
+      }
+    }
+    catch (...)
+    {
+      // fill uno exception
+      CPPU_CURRENT_NAMESPACE::fillUnoException(*ppUnoExc, pThis->getBridge()->getCpp2Uno());
+
+      // temporary params
+      for ( ; nTempIndices--; )
+      {
+        sal_Int32 nIndex = pTempIndices[nTempIndices];
+        // destroy temp cpp param => cpp: every param was constructed
+        uno_destructData( pCppArgs[nIndex], ppTempParamTypeDescr[nTempIndices], cpp_release );
+        TYPELIB_DANGER_RELEASE( ppTempParamTypeDescr[nTempIndices] );
+      }
+      // return type
+      if (pReturnTypeDescr)
+        TYPELIB_DANGER_RELEASE( pReturnTypeDescr );
+    }
+  }
+
+}
+
+
+namespace bridges::cpp_uno::shared {
+
+void unoInterfaceProxyDispatch(
+    uno_Interface * pUnoI, const typelib_TypeDescription * pMemberDescr,
+    void * pReturn, void * pArgs[], uno_Any ** ppException )
+{
+  // is my surrogate
+  bridges::cpp_uno::shared::UnoInterfaceProxy * pThis
+    = static_cast< bridges::cpp_uno::shared::UnoInterfaceProxy *> (pUnoI);
+  //typelib_InterfaceTypeDescription * pTypeDescr = pThis->pTypeDescr;
+
+#ifdef BRDEBUG
+  fprintf(stderr, "in dispatch\n");
+#endif
+
+  switch (pMemberDescr->eTypeClass)
+  {
+    case typelib_TypeClass_INTERFACE_ATTRIBUTE:
+      {
+
+        VtableSlot aVtableSlot(
+            getVtableSlot(
+              reinterpret_cast<
+              typelib_InterfaceAttributeTypeDescription const * >(
+                pMemberDescr)));
+
+        if (pReturn)
+        {
+          // dependent dispatch
+          cpp_call(
+              pThis, aVtableSlot,
+              ((typelib_InterfaceAttributeTypeDescription *)pMemberDescr)->pAttributeTypeRef,
+              0, 0, // no params
+              pReturn, pArgs, ppException );
+        }
+        else
+        {
+          // is SET
+          typelib_MethodParameter aParam;
+          aParam.pTypeRef =
+            ((typelib_InterfaceAttributeTypeDescription *)pMemberDescr)->pAttributeTypeRef;
+          aParam.bIn        = sal_True;
+          aParam.bOut       = sal_False;
+
+          typelib_TypeDescriptionReference * pReturnTypeRef = 0;
+          OUString aVoidName("void");
+          typelib_typedescriptionreference_new(
+              &pReturnTypeRef, typelib_TypeClass_VOID, aVoidName.pData );
+
+          // dependent dispatch
+          aVtableSlot.index += 1; //get then set method
+          cpp_call(
+              pThis, aVtableSlot,
+              pReturnTypeRef,
+              1, &aParam,
+              pReturn, pArgs, ppException );
+
+          typelib_typedescriptionreference_release( pReturnTypeRef );
+        }
+
+        break;
+      }
+    case typelib_TypeClass_INTERFACE_METHOD:
+      {
+
+        VtableSlot aVtableSlot(
+            getVtableSlot(
+              reinterpret_cast<
+              typelib_InterfaceMethodTypeDescription const * >(
+                pMemberDescr)));
+        switch (aVtableSlot.index)
+        {
+          // standard calls
+          case 1: // acquire uno interface
+            (*pUnoI->acquire)( pUnoI );
+            *ppException = 0;
+            break;
+          case 2: // release uno interface
+            (*pUnoI->release)( pUnoI );
+            *ppException = 0;
+            break;
+          case 0: // queryInterface() opt
+            {
+              typelib_TypeDescription * pTD = 0;
+              TYPELIB_DANGER_GET( &pTD, reinterpret_cast< Type * >( pArgs[0] )->getTypeLibType() );
+              if (pTD)
+              {
+                uno_Interface * pInterface = 0;
+                (*pThis->pBridge->getUnoEnv()->getRegisteredInterface)(pThis->pBridge->getUnoEnv(),
+                                                                       (void **)&pInterface, pThis->oid.pData,
+                                                                       (typelib_InterfaceTypeDescription *)pTD );
+
+                if (pInterface)
+                {
+                  ::uno_any_construct(
+                      reinterpret_cast< uno_Any * >( pReturn ),
+                      &pInterface, pTD, 0 );
+                  (*pInterface->release)( pInterface );
+                  TYPELIB_DANGER_RELEASE( pTD );
+                  *ppException = 0;
+                  break;
+                }
+                TYPELIB_DANGER_RELEASE( pTD );
+              }
+            } // else perform queryInterface()
+          default:
+            // dependent dispatch
+            cpp_call(
+                pThis, aVtableSlot,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->pReturnTypeRef,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->nParams,
+                ((typelib_InterfaceMethodTypeDescription *)pMemberDescr)->pParams,
+                pReturn, pArgs, ppException );
+        }
+        break;
+      }
+    default:
+      {
+        ::com::sun::star::uno::RuntimeException aExc(
+            "illegal member type description!",
+            ::com::sun::star::uno::Reference< ::com::sun::star::uno::XInterface >() );
+
+        Type const & rExcType = cppu::UnoType<decltype(aExc)>::get();
+        // binary identical null reference
+        ::uno_type_any_construct( *ppException, &aExc, rExcType.getTypeLibType(), 0 );
+      }
+  }
+}
+
+}
+
+/* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/configure.ac b/configure.ac
index 1d0b5aa6c..cd4d72713 100644
--- a/configure.ac
+++ b/configure.ac
@@ -9,7 +9,7 @@ dnl in order to create a configure script.
 # several non-alphanumeric characters, those are split off and used only for the
 # ABOUTBOXPRODUCTVERSIONSUFFIX in openoffice.lst. Why that is necessary, no idea.
 
-AC_INIT([LibreOffice],[7.3.4.2],[],[],[http://documentfoundation.org/])
+AC_INIT([LibreOffice],[7.5.0.0.alpha0+],[],[],[http://documentfoundation.org/])
 
 dnl libnumbertext needs autoconf 2.68, but that can pick up autoconf268 just fine if it is installed
 dnl whereas aclocal (as run by autogen.sh) insists on using autoconf and fails hard
@@ -248,6 +248,34 @@ dnl path location is gpg, so make sure we find it
     unset mac_gpg_path
 }
 
+dnl semantically test a three digits version
+dnl $1 - $3 = minimal version
+dnl $4 - $6 = current version
+
+check_semantic_version_three()
+{
+    test "$4" -gt "$1" \
+        -o \( "$4" -eq "$1" -a "$5" -gt "$2" \) \
+        -o \( "$4" -eq "$1" -a "$5" -eq "$2" -a "$6" -ge "$3" \)
+    return $?
+}
+
+dnl calls check_semantic_version_three with digits in named variables $1_MAJOR, $1_MINOR, $1_TINY
+dnl $1 = current version prefix, e.g. EMSCRIPTEN => EMSCRIPTEN_
+dnl $2 = postfix to $1, e.g. MIN => EMSCRIPTEN_MIN_
+
+check_semantic_version_three_prefixed()
+{
+    eval local MIN_MAJOR="\$${1}_${2}_MAJOR"
+    eval local MIN_MINOR="\$${1}_${2}_MINOR"
+    eval local MIN_TINY="\$${1}_${2}_TINY"
+    eval local CUR_MAJOR="\$${1}_MAJOR"
+    eval local CUR_MINOR="\$${1}_MINOR"
+    eval local CUR_TINY="\$${1}_TINY"
+    check_semantic_version_three $MIN_MAJOR $MIN_MINOR $MIN_TINY $CUR_MAJOR $CUR_MINOR $CUR_TINY
+    return $?
+}
+
 echo "********************************************************************"
 echo "*"
 echo "*   Running ${PACKAGE_NAME} build configuration."
@@ -622,22 +650,22 @@ AC_ARG_WITH(android-api-level,
         [Specify the API level when building for Android. Defaults to 16 for ARM and x86 and to 21 for ARM64 and x86-64]),
 ,)
 
-ANDROID_NDK_HOME=
+ANDROID_NDK_DIR=
 if test -z "$with_android_ndk" -a -e "$SRC_ROOT/external/android-ndk" -a "$build" != "$host"; then
     with_android_ndk="$SRC_ROOT/external/android-ndk"
 fi
 if test -n "$with_android_ndk"; then
-    eval ANDROID_NDK_HOME=$with_android_ndk
+    eval ANDROID_NDK_DIR=$with_android_ndk
 
     # Set up a lot of pre-canned defaults
 
-    if test ! -f $ANDROID_NDK_HOME/RELEASE.TXT; then
-        if test ! -f $ANDROID_NDK_HOME/source.properties; then
-            AC_MSG_ERROR([Unrecognized Android NDK. Missing RELEASE.TXT or source.properties file in $ANDROID_NDK_HOME.])
+    if test ! -f $ANDROID_NDK_DIR/RELEASE.TXT; then
+        if test ! -f $ANDROID_NDK_DIR/source.properties; then
+            AC_MSG_ERROR([Unrecognized Android NDK. Missing RELEASE.TXT or source.properties file in $ANDROID_NDK_DIR.])
         fi
-        ANDROID_NDK_VERSION=`sed -n -e 's/Pkg.Revision = //p' $ANDROID_NDK_HOME/source.properties`
+        ANDROID_NDK_VERSION=`sed -n -e 's/Pkg.Revision = //p' $ANDROID_NDK_DIR/source.properties`
     else
-        ANDROID_NDK_VERSION=`cut -f1 -d' ' <$ANDROID_NDK_HOME/RELEASE.TXT`
+        ANDROID_NDK_VERSION=`cut -f1 -d' ' <$ANDROID_NDK_DIR/RELEASE.TXT`
     fi
     if test -z "$ANDROID_NDK_VERSION";  then
         AC_MSG_ERROR([Failed to determine Android NDK version. Please check your installation.])
@@ -723,10 +751,10 @@ if test -n "$with_android_ndk"; then
         # ndk would also support windows and windows-x86_64
         ;;
     esac
-    android_TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/$android_HOST_TAG
+    android_TOOLCHAIN=$ANDROID_NDK_DIR/toolchains/llvm/prebuilt/$android_HOST_TAG
     ANDROID_COMPILER_BIN=$android_TOOLCHAIN/bin
     dnl TODO: NSS build uses it...
-    ANDROID_BINUTILS_PREBUILT_ROOT=$ANDROID_NDK_HOME/toolchains/$android_platform_prefix-$ANDROID_GCC_TOOLCHAIN_VERSION/prebuilt/$android_HOST_TAG
+    ANDROID_BINUTILS_PREBUILT_ROOT=$ANDROID_NDK_DIR/toolchains/$android_platform_prefix-$ANDROID_GCC_TOOLCHAIN_VERSION/prebuilt/$android_HOST_TAG
     AC_SUBST(ANDROID_BINUTILS_PREBUILT_ROOT)
 
     test -z "$AR" && AR=$ANDROID_COMPILER_BIN/$android_gnu_prefix-ar
@@ -754,22 +782,22 @@ if test -n "$with_android_ndk"; then
         CXX_BASE="clang++"
     fi
 fi
-AC_SUBST(ANDROID_NDK_HOME)
+AC_SUBST(ANDROID_NDK_DIR)
 AC_SUBST(ANDROID_APP_ABI)
 AC_SUBST(ANDROID_GCC_TOOLCHAIN_VERSION)
 
 dnl ===================================================================
 dnl --with-android-sdk
 dnl ===================================================================
-ANDROID_SDK_HOME=
+ANDROID_SDK_DIR=
 if test -z "$with_android_sdk" -a -e "$SRC_ROOT/external/android-sdk-linux" -a "$build" != "$host"; then
     with_android_sdk="$SRC_ROOT/external/android-sdk-linux"
 fi
 if test -n "$with_android_sdk"; then
-    eval ANDROID_SDK_HOME=$with_android_sdk
-    PATH="$ANDROID_SDK_HOME/platform-tools:$ANDROID_SDK_HOME/tools:$PATH"
+    eval ANDROID_SDK_DIR=$with_android_sdk
+    PATH="$ANDROID_SDK_DIR/platform-tools:$ANDROID_SDK_DIR/tools:$PATH"
 fi
-AC_SUBST(ANDROID_SDK_HOME)
+AC_SUBST(ANDROID_SDK_DIR)
 
 AC_ARG_ENABLE([android-lok],
     AS_HELP_STRING([--enable-android-lok],
@@ -779,7 +807,7 @@ AC_ARG_ENABLE([android-lok],
          actually the Online-based, non-modified LOK.])
 )
 ENABLE_ANDROID_LOK=
-if test -n "$ANDROID_NDK_HOME" ; then
+if test -n "$ANDROID_NDK_DIR" ; then
     if test "$enable_android_lok" = yes; then
         ENABLE_ANDROID_LOK=TRUE
         AC_DEFINE(HAVE_FEATURE_ANDROID_LOK)
@@ -818,16 +846,16 @@ disable_database_connectivity_dependencies()
 # This is also true for most test_* variables.
 # ===================================================================
 build_crypto=yes
-test_cmis=yes
+test_clucene=no
 test_gdb_index=no
 test_openldap=yes
 test_split_debug=no
 test_webdav=yes
+usable_dlapi=yes
 
 # There is currently just iOS not using salplug, so this explicitly enables it.
 # must: using_freetype_fontconfig
 #  may: using_headless_plugin defaults to $using_freetype_fontconfig
-using_vclplug=yes
 # must: using_x11
 
 # Default values, as such probably valid just for Linux, set
@@ -910,7 +938,10 @@ cygwin*|wsl*)
 
     using_freetype_fontconfig=no
     using_x11=no
+    test_unix_dlapi=no
     test_openldap=no
+    test_eot=no
+    enable_pagein=no
     build_skia=yes
     _os=WINNT
 
@@ -925,10 +956,12 @@ cygwin*|wsl*)
     fi
     ;;
 
-darwin*|macos*) # macOS
+darwin*) # macOS
     using_freetype_fontconfig=no
     using_x11=no
     build_skia=yes
+    enable_pagein=no
+    test_eot=no
     if test -n "$LODE_HOME" ; then
         mac_sanitize_path
         AC_MSG_NOTICE([sanitized the PATH to $PATH])
@@ -937,7 +970,7 @@ darwin*|macos*) # macOS
     INSTROOTBASESUFFIX=/$PRODUCTNAME_WITHOUT_SPACES.app
     INSTROOTCONTENTSUFFIX=/Contents
     SDKDIRNAME=${PRODUCTNAME_WITHOUT_SPACES}${PRODUCTVERSION}_SDK
-    # See comment above the case "$host_os"
+    # See "Default values, as such probably valid just for Linux" comment above the case "$host_os"
     LINKFLAGSSHL="-dynamiclib -single_module"
 
     # -fPIC is default
@@ -949,14 +982,6 @@ darwin*|macos*) # macOS
     LINKFLAGSNOUNDEFS=""
     case "$host_cpu" in
     aarch64|arm64)
-        case "$host_os" in
-        macos*)
-            # HOST_PLATFORM is used for external projects and their configury occasionally doesn't like
-            # the "macos" part so be sure to use aarch64-apple-darwin for now.
-            HOST_PLATFORM=aarch64-apple-darwin
-            ;;
-        esac
-
         # Apple's Clang uses "arm64"
         host_cpu_for_clang=arm64
     esac
@@ -964,10 +989,9 @@ darwin*|macos*) # macOS
 
 ios*) # iOS
     using_freetype_fontconfig=no
-    using_vclplug=no
     using_x11=no
     build_crypto=no
-    test_cmis=no
+    test_libcmis=no
     test_openldap=no
     test_webdav=no
     if test -n "$LODE_HOME" ; then
@@ -987,7 +1011,7 @@ ios*) # iOS
     if test "$enable_ios_simulator" = "yes"; then
         host=x86_64-apple-darwin
     fi
-    # See comment above the case "$host_os"
+    # See "Default values, as such probably valid just for Linux" comment above the case "$host_os"
     LINKFLAGSSHL="-dynamiclib -single_module"
 
     # -fPIC is default
@@ -1067,6 +1091,8 @@ dragonfly*)
     ;;
 
 linux-android*)
+    # API exists, but seems not really usable since Android 7 AFAIK
+    usable_dlapi=no
     using_freetype_fontconfig=yes
     using_headless_plugin=no
     using_x11=no
@@ -1084,13 +1110,12 @@ linux-android*)
     enable_python=no
     enable_xmlhelp=no
     _os=Android
-
-    AC_DEFINE(HAVE_FT_FACE_GETCHARVARIANTINDEX)
     ;;
 
 haiku*)
     using_freetype_fontconfig=yes
     using_x11=no
+    test_gtk3=no
     test_gtk3_kde5=no
     test_kf5=yes
     enable_odk=no
@@ -1103,17 +1128,22 @@ haiku*)
     ;;
 
 emscripten)
+    # API currently just exists in headers, not code
+    usable_dlapi=no
     using_freetype_fontconfig=yes
     using_x11=no
     test_openldap=no
+    test_qt5=yes
+    test_split_debug=yes
+    test_system_freetype=no
     enable_compiler_plugins=no
-    test_cmis=no
-    test_webdav=no
-    enable_database_connectivity=no
-    enable_lpsolve=no
-    enable_xmlhelp=no
+    enable_customtarget_components=yes
+    enable_qt5=yes
+    enable_scripting=no
+    enable_split_debug=yes
+    enable_wasm_strip=yes
     with_system_zlib=no
-    with_theme="breeze"
+    with_theme="colibre"
     _os=Emscripten
     ;;
 
@@ -1131,6 +1161,7 @@ fi
 # Set defaults, if not set by platform
 test "${test_cups+set}" = set || test_cups="$using_x11"
 test "${test_dbus+set}" = set || test_dbus="$using_x11"
+test "${test_gen+set}" = set || test_gen="$using_x11"
 test "${test_gstreamer_1_0+set}" = set || test_gstreamer_1_0="$using_x11"
 test "${test_gtk3+set}" = set || test_gtk3="$using_x11"
 test "${test_gtk4+set}" = set || test_gtk4="$using_x11"
@@ -1142,6 +1173,7 @@ test "${test_xrender+set}" = set || test_xrender="$using_x11"
 test "${using_headless_plugin+set}" = set || using_headless_plugin="$using_freetype_fontconfig"
 
 test "${test_gtk3_kde5+set}" != set -a "$test_kf5" = yes -a "$test_gtk3" = yes && test_gtk3_kde5="yes"
+# Make sure fontconfig and freetype test both either system or not
 test "${test_system_fontconfig+set}" != set -a "${test_system_freetype+set}" = set && test_system_fontconfig="$test_system_freetype"
 test "${test_system_freetype+set}" != set -a "${test_system_fontconfig+set}" = set && test_system_freetype="$test_system_fontconfig"
 
@@ -1149,6 +1181,7 @@ test "${test_system_freetype+set}" != set -a "${test_system_fontconfig+set}" = s
 # Don't sort!
 test "$test_kf5" = yes -a "$test_qt5" = no && test_kf5=no
 test "$test_kf5" = yes && test_qt5=yes
+test "$test_gtk3" != yes && enable_gtk3=no
 test "$test_gtk3" != yes -o "$test_kf5" != yes && test_gtk3_kde5=no
 test "$using_freetype_fontconfig" = no && using_headless_plugin=no
 test "$using_freetype_fontconfig" = yes && test_cairo=yes
@@ -1158,6 +1191,7 @@ disable_x11_tests()
 {
     test_cups=no
     test_dbus=no
+    test_gen=no
     test_gstreamer_1_0=no
     test_gtk3_kde5=no
     test_gtk3=no
@@ -1172,17 +1206,22 @@ disable_x11_tests()
 test "$using_x11" = yes && USING_X11=TRUE
 
 if test "$using_freetype_fontconfig" = yes; then
+    USE_HEADLESS_CODE=TRUE
     if test "$using_headless_plugin" = yes; then
         AC_DEFINE(ENABLE_HEADLESS)
         ENABLE_HEADLESS=TRUE
     fi
+else
+    test_fontconfig=no
+    test_freetype=no
 fi
 
 AC_SUBST(ENABLE_HEADLESS)
+AC_SUBST(USE_HEADLESS_CODE)
 
+AC_MSG_NOTICE([VCL platform has a usable dynamic loading API: $usable_dlapi])
 AC_MSG_NOTICE([VCL platform uses freetype+fontconfig: $using_freetype_fontconfig])
 AC_MSG_NOTICE([VCL platform uses headless plugin: $using_headless_plugin])
-AC_MSG_NOTICE([VCL platform uses vclplug: $using_vclplug])
 AC_MSG_NOTICE([VCL platform uses X11: $using_x11])
 
 # ===================================================================
@@ -1195,33 +1234,15 @@ if test "$_os" = "Android" ; then
     # Verify that the NDK and SDK options are proper
     if test -z "$with_android_ndk"; then
         AC_MSG_ERROR([the --with-android-ndk option is mandatory, unless it is available at external/android-ndk/.])
-    elif test ! -f "$ANDROID_NDK_HOME/meta/abis.json"; then
+    elif test ! -f "$ANDROID_NDK_DIR/meta/abis.json"; then
         AC_MSG_ERROR([the --with-android-ndk option does not point to an Android NDK])
     fi
 
-    if test -z "$ANDROID_SDK_HOME"; then
+    if test -z "$ANDROID_SDK_DIR"; then
         AC_MSG_ERROR([the --with-android-sdk option is mandatory, unless it is available at external/android-sdk-linux/.])
-    elif test ! -d "$ANDROID_SDK_HOME/platforms"; then
+    elif test ! -d "$ANDROID_SDK_DIR/platforms"; then
         AC_MSG_ERROR([the --with-android-sdk option does not point to an Android SDK])
     fi
-
-    BUILD_TOOLS_VERSION=`$SED -n -e 's/.*buildToolsVersion "\(.*\)"/\1/p' $SRC_ROOT/android/source/build.gradle`
-    if test ! -d "$ANDROID_SDK_HOME/build-tools/$BUILD_TOOLS_VERSION"; then
-        AC_MSG_WARN([android build-tools $BUILD_TOOLS_VERSION not found - install with
-                         $ANDROID_SDK_HOME/tools/android update sdk -u --all --filter build-tools-$BUILD_TOOLS_VERSION
-                    or adjust change $SRC_ROOT/android/source/build.gradle accordingly])
-        add_warning "android build-tools $BUILD_TOOLS_VERSION not found - install with"
-        add_warning "    $ANDROID_SDK_HOME/tools/android update sdk -u --all --filter build-tools-$BUILD_TOOLS_VERSION"
-        add_warning "or adjust $SRC_ROOT/android/source/build.gradle accordingly"
-    fi
-    if test ! -f "$ANDROID_SDK_HOME/extras/android/m2repository/source.properties"; then
-        AC_MSG_WARN([android support repository not found - install with
-                         $ANDROID_SDK_HOME/tools/android update sdk -u --filter extra-android-m2repository
-                     to allow the build to download the specified version of the android support libraries])
-        add_warning "android support repository not found - install with"
-        add_warning "    $ANDROID_SDK_HOME/tools/android update sdk -u --filter extra-android-m2repository"
-        add_warning "to allow the build to download the specified version of the android support libraries"
-    fi
 fi
 
 if test "$_os" = "AIX"; then
@@ -1325,14 +1346,18 @@ else
 fi
 AC_SUBST(ENDIANNESS)
 
-if test $_os != "WINNT"; then
-    save_LIBS="$LIBS"
-    AC_SEARCH_LIBS([dlsym], [dl],
-        [case "$ac_cv_search_dlsym" in -l*) DLOPEN_LIBS="$ac_cv_search_dlsym";; esac],
-        [AC_MSG_ERROR([dlsym not found in either libc nor libdl])])
-    LIBS="$save_LIBS"
+if test "$usable_dlapi" != no; then
+    AC_DEFINE([HAVE_DLAPI])
+    if test "$test_unix_dlapi" != no; then
+        save_LIBS="$LIBS"
+        AC_SEARCH_LIBS([dlsym], [dl],
+            [case "$ac_cv_search_dlsym" in -l*) UNIX_DLAPI_LIBS="$ac_cv_search_dlsym";; esac],
+            [AC_MSG_ERROR([dlsym not found in either libc nor libdl])])
+        LIBS="$save_LIBS"
+        AC_DEFINE([HAVE_UNIX_DLAPI])
+    fi
 fi
-AC_SUBST(DLOPEN_LIBS)
+AC_SUBST(UNIX_DLAPI_LIBS)
 
 # Check for a (GNU) backtrace implementation
 AC_ARG_VAR([BACKTRACE_CFLAGS], [Compiler flags needed to use backtrace(3)])
@@ -1352,7 +1377,26 @@ dnl ===================================================================
 dnl Sanity checks for Emscripten SDK setup
 dnl ===================================================================
 
+EMSCRIPTEN_MIN_MAJOR=2
+EMSCRIPTEN_MIN_MINOR=0
+EMSCRIPTEN_MIN_TINY=31
+EMSCRIPTEN_MIN_VERSION="${EMSCRIPTEN_MIN_MAJOR}.${EMSCRIPTEN_MIN_MINOR}.${EMSCRIPTEN_MIN_TINY}"
+
 if test "$_os" = "Emscripten"; then
+    AC_MSG_CHECKING([if Emscripten is at least $EMSCRIPTEN_MIN_VERSION])
+    EMSCRIPTEN_DEFINES=$(echo | emcc -dM -E - | $GREP __EMSCRIPTEN_)
+    EMSCRIPTEN_MAJOR=$(echo "$EMSCRIPTEN_DEFINES" | $SED -ne 's/.*__EMSCRIPTEN_major__ //p')
+    EMSCRIPTEN_MINOR=$(echo "$EMSCRIPTEN_DEFINES" | $SED -ne 's/.*__EMSCRIPTEN_minor__ //p')
+    EMSCRIPTEN_TINY=$(echo "$EMSCRIPTEN_DEFINES" | $SED -ne 's/.*__EMSCRIPTEN_tiny__ //p')
+    EMSCRIPTEN_VERSION="${EMSCRIPTEN_MAJOR}.${EMSCRIPTEN_MINOR}.${EMSCRIPTEN_TINY}"
+
+    check_semantic_version_three_prefixed EMSCRIPTEN MIN
+    if test $? -eq 0; then
+        AC_MSG_RESULT([yes ($EMSCRIPTEN_VERSION)])
+    else
+        AC_MSG_ERROR([no, found $EMSCRIPTEN_VERSION])
+    fi
+
     EMSCRIPTEN_ERROR=0
     if ! which emconfigure >/dev/null 2>&1; then
         AC_MSG_WARN([emconfigure must be in your \$PATH])
@@ -1362,10 +1406,16 @@ if test "$_os" = "Emscripten"; then
         AC_MSG_WARN(["\$EMMAKEN_JUST_CONFIGURE wasn't set by emconfigure. Prefix configure or use autogen.sh])
         EMSCRIPTEN_ERROR=1
     fi
+    EMSDK_FILE_PACKAGER="$(em-config EMSCRIPTEN_ROOT)"/tools/file_packager
+    if ! test -x "$EMSDK_FILE_PACKAGER"; then
+        AC_MSG_WARN([No file_packager found in $(em-config EMSCRIPTEN_ROOT)/tools/file_packager.])
+        EMSCRIPTEN_ERROR=1
+    fi
     if test $EMSCRIPTEN_ERROR -ne 0; then
         AC_MSG_ERROR(["Please fix your EMSDK setup to build with Emscripten!"])
     fi
 fi
+AC_SUBST(EMSDK_FILE_PACKAGER)
 
 ###############################################################################
 # Extensions switches --enable/--disable
@@ -1393,8 +1443,8 @@ libo_FUZZ_ARG_ENABLE(extension-integration,
 
 AC_ARG_ENABLE(avmedia,
     AS_HELP_STRING([--disable-avmedia],
-        [Disable displaying and inserting AV media in documents. Work in progress, use only if you are hacking on it.])
-)
+        [Disable displaying and inserting AV media in documents. Work in progress, use only if you are hacking on it.]),
+,test "${enable_avmedia+set}" = set || enable_avmedia=yes)
 
 AC_ARG_ENABLE(database-connectivity,
     AS_HELP_STRING([--disable-database-connectivity],
@@ -1412,8 +1462,8 @@ libo_FUZZ_ARG_ENABLE(extensions,
 
 AC_ARG_ENABLE(scripting,
     AS_HELP_STRING([--disable-scripting],
-        [Disable BASIC, Java and Python. Work in progress, use only if you are hacking on it.])
-)
+        [Disable BASIC, Java and Python. Work in progress, use only if you are hacking on it.]),
+,test "${enable_scripting+set}" = set || enable_scripting=yes)
 
 # This is mainly for Android and iOS, but could potentially be used in some
 # special case otherwise, too, so factored out as a separate setting
@@ -1553,7 +1603,7 @@ libo_FUZZ_ARG_ENABLE(split-debug,
 libo_FUZZ_ARG_ENABLE(gdb-index,
     AS_HELP_STRING([--disable-gdb-index],
         [Disables creating debug information in the gdb index format, which makes gdb start faster.
-         The feature requires the gold or lld linker.]))
+         The feature requires a linker that supports the --gdb-index option.]))
 
 libo_FUZZ_ARG_ENABLE(sal-log,
     AS_HELP_STRING([--enable-sal-log],
@@ -1628,7 +1678,7 @@ AC_ARG_ENABLE(python,
 libo_FUZZ_ARG_ENABLE(gtk3,
     AS_HELP_STRING([--disable-gtk3],
         [Determines whether to use Gtk+ 3.0 vclplug on platforms where Gtk+ 3.0 is available.]),
-,test "${enable_gtk3+set}" = set || enable_gtk3=yes)
+,test "${test_gtk3}" = no -o "${enable_gtk3+set}" = set || enable_gtk3=yes)
 
 AC_ARG_ENABLE(gtk4,
     AS_HELP_STRING([--enable-gtk4],
@@ -1701,6 +1751,12 @@ AC_ARG_ENABLE(gtk3_kde5,
          platforms where Gtk3, Qt5 and Plasma is available.]),
 ,)
 
+AC_ARG_ENABLE(gen,
+    AS_HELP_STRING([--enable-gen],
+        [To select the gen backend in case of --disable-dynamic-loading.
+         Per default auto-enabled when X11 is used.]),
+,test "${test_gen}" = no -o "${enable_gen+set}" = set || enable_gen=yes)
+
 AC_ARG_ENABLE(gui,
     AS_HELP_STRING([--disable-gui],
         [Disable use of X11 or Wayland to reduce dependencies (e.g. for building LibreOfficeKit).]),
@@ -1716,11 +1772,6 @@ libo_FUZZ_ARG_ENABLE(gstreamer-1-0,
         [Disable building with the gstreamer 1.0 avmedia backend.]),
 ,test "${enable_gstreamer_1_0+set}" = set || enable_gstreamer_1_0=yes)
 
-libo_FUZZ_ARG_ENABLE([eot],
-    [AS_HELP_STRING([--enable-eot],
-        [Enable support for Embedded OpenType fonts.])],
-,test "${enable_eot+set}" = set || enable_eot=no)
-
 libo_FUZZ_ARG_ENABLE(cve-tests,
     AS_HELP_STRING([--disable-cve-tests],
         [Prevent CVE tests to be executed]),
@@ -1898,7 +1949,7 @@ AC_ARG_ENABLE(bogus-pkg-config,
 AC_ARG_ENABLE(openssl,
     AS_HELP_STRING([--disable-openssl],
         [Disable using libssl/libcrypto from OpenSSL. If disabled,
-         components will either use GNUTLS or NSS. Work in progress,
+         components will use NSS. Work in progress,
          use only if you are hacking on it.]),
 ,enable_openssl=yes)
 
@@ -1910,7 +1961,7 @@ libo_FUZZ_ARG_ENABLE(cipher-openssl-backend,
 AC_ARG_ENABLE(nss,
     AS_HELP_STRING([--disable-nss],
         [Disable using NSS. If disabled,
-         components will either use GNUTLS or openssl. Work in progress,
+         components will use openssl. Work in progress,
          use only if you are hacking on it.]),
 ,enable_nss=yes)
 
@@ -1957,26 +2008,26 @@ libo_FUZZ_ARG_ENABLE(librelogo,
         [Do not build LibreLogo.]),
 ,enable_librelogo=yes)
 
-AC_ARG_ENABLE(cmis,
-    AS_HELP_STRING([--disable-cmis],
-        [Disable CMIS support.]),
-,enable_cmis=yes)
-
-AC_ARG_ENABLE(curl,
-    AS_HELP_STRING([--disable-curl],
-        [Disable CURL support.]),
-,enable_curl=yes)
-
 AC_ARG_ENABLE(wasm-strip,
     AS_HELP_STRING([--enable-wasm-strip],
         [Strip the static build like for WASM/emscripten platform.]),
-,enable_wasm_strip=yes)
+,)
+
+AC_ARG_ENABLE(wasm-exceptions,
+    AS_HELP_STRING([--enable-wasm-exceptions],
+        [Build with native WASM exceptions (AKA -fwasm-exceptions),
+        matter of fact, this is currently not finished by any implementation)
+        (see https://webassembly.org/roadmap/ for the current state]),
+,)
 
 AC_ARG_ENABLE(xmlhelp,
     AS_HELP_STRING([--disable-xmlhelp],
         [Disable XML help support]),
 ,enable_xmlhelp=yes)
 
+AC_ARG_ENABLE(customtarget-components,
+    AS_HELP_STRING([--enable-customtarget-components],
+        [Generates the static UNO object constructor mapping from the build.]))
 
 dnl ===================================================================
 dnl Optional Packages (--with/without-)
@@ -2035,8 +2086,12 @@ AC_ARG_WITH(galleries,
 AC_ARG_WITH(theme,
     AS_HELP_STRING([--with-theme="theme1 theme2..."],
         [Choose which themes to include. By default those themes with an '*' are included.
-         Possible choices: *breeze, *breeze_dark, *breeze_dark_svg, *breeze_svg, *colibre, *colibre_svg, *elementary,
-         *elementary_svg, *karasa_jaga, *karasa_jaga_svg, *sifr, *sifr_dark, *sifr_dark_svg, *sifr_svg, *sukapura, *sukapura_svg.]),
+         Possible choices: *breeze, *breeze_dark, *breeze_dark_svg, *breeze_svg,
+         *colibre, *colibre_svg, *colibre_dark, *colibre_dark_svg,
+         *elementary, *elementary_svg,
+         *karasa_jaga, *karasa_jaga_svg,
+         *sifr, *sifr_dark, *sifr_dark_svg, *sifr_svg,
+         *sukapura, *sukapura_svg.]),
 ,)
 
 libo_FUZZ_ARG_WITH(helppack-integration,
@@ -2073,7 +2128,7 @@ AC_ARG_WITH(tls,
     AS_HELP_STRING([--with-tls],
         [Decides which TLS/SSL and cryptographic implementations to use for
          LibreOffice's code. Notice that this doesn't apply for depending
-         libraries like "neon", for example. Default is to use NSS
+         libraries like "curl", for example. Default is to use NSS
          although OpenSSL is also possible. Notice that selecting NSS restricts
          the usage of OpenSSL in LO's code but selecting OpenSSL doesn't
          restrict by now the usage of NSS in LO's code. Possible values:
@@ -2149,11 +2204,6 @@ AC_ARG_WITH(system-jpeg,
         [Use jpeg already on system.]),,
     [with_system_jpeg="$with_system_libs"])
 
-AC_ARG_WITH(system-clucene,
-    AS_HELP_STRING([--with-system-clucene],
-        [Use clucene already on system.]),,
-    [with_system_clucene="$with_system_libs"])
-
 AC_ARG_WITH(system-expat,
     AS_HELP_STRING([--with-system-expat],
         [Use expat already on system.]),,
@@ -2164,16 +2214,6 @@ AC_ARG_WITH(system-libxml,
         [Use libxml/libxslt already on system.]),,
     [with_system_libxml=auto])
 
-AC_ARG_WITH(system-icu,
-    AS_HELP_STRING([--with-system-icu],
-        [Use icu already on system.]),,
-    [with_system_icu="$with_system_libs"])
-
-AC_ARG_WITH(system-ucpp,
-    AS_HELP_STRING([--with-system-ucpp],
-        [Use ucpp already on system.]),,
-    [])
-
 AC_ARG_WITH(system-openldap,
     AS_HELP_STRING([--with-system-openldap],
         [Use the OpenLDAP LDAP SDK already on system.]),,
@@ -2361,11 +2401,6 @@ AC_ARG_WITH(system-bluez,
         [Use bluetooth.h already on system.]),,
     [with_system_bluez="$with_system_headers"])
 
-AC_ARG_WITH(system-curl,
-    AS_HELP_STRING([--with-system-curl],
-        [Use curl already on system.]),,
-    [with_system_curl=auto])
-
 AC_ARG_WITH(system-boost,
     AS_HELP_STRING([--with-system-boost],
         [Use boost already on system.]),,
@@ -2376,6 +2411,16 @@ AC_ARG_WITH(system-cuckoo,
         [Use libcuckoo already on system.]),,
     [with_system_cuckoo="$with_system_headers"])
 
+AC_ARG_WITH(system-dragonbox,
+    AS_HELP_STRING([--with-system-dragonbox],
+        [Use dragonbox already on system.]),,
+    [with_system_dragonbox="$with_system_headers"])
+
+AC_ARG_WITH(system-libfixmath,
+    AS_HELP_STRING([--with-system-libfixmath],
+        [Use libfixmath already on system.]),,
+    [with_system_libfixmath="$with_system_libs"])
+
 AC_ARG_WITH(system-glm,
     AS_HELP_STRING([--with-system-glm],
         [Use glm already on system.]),,
@@ -2425,11 +2470,13 @@ AC_ARG_WITH(system-liblangtag,
         [Use liblangtag library already on system.]),,
     [with_system_liblangtag="$with_system_libs"])
 
+AC_ARG_WITH(system-lockfile,
+    AS_HELP_STRING([--with-system-lockfile[=file]],
+        [Detect a system lockfile program or use the \$file argument.]))
+
 AC_ARG_WITH(webdav,
-    AS_HELP_STRING([--with-webdav],
-        [Specify which library to use for webdav implementation.
-         Possible values: "neon", "serf", "curl", "no". The default value is "neon".
-         Example: --with-webdav="serf"]))
+    AS_HELP_STRING([--without-webdav],
+        [Disable WebDAV support in the UCB.]))
 
 AC_ARG_WITH(linker-hash-style,
     AS_HELP_STRING([--with-linker-hash-style],
@@ -2570,6 +2617,7 @@ AC_ARG_WITH(locales,
          Very experimental and might well break stuff.
          Just a desperate measure to shrink code and data size.
          By default all the locales available is included.
+         Just works with --disable-dynloading. Defaults to "ALL".
          This option is completely unrelated to --with-lang.])
     [
                           Affects also our character encoding conversion
@@ -2601,12 +2649,6 @@ libo_FUZZ_ARG_WITH(gssapi,
          where a good system GSSAPI is available.]),
 ,)
 
-AC_ARG_WITH(iwyu,
-    AS_HELP_STRING([--with-iwyu],
-        [Use given IWYU binary path to check unneeded includes instead of building.
-         Use only if you are hacking on it.]),
-,)
-
 libo_FUZZ_ARG_WITH(lxml,
     AS_HELP_STRING([--without-lxml],
         [gla11y will use python lxml when available, potentially building a local copy if necessary.
@@ -2691,11 +2733,6 @@ AC_ARG_WITH(os-version,
         [For FreeBSD users, use this option to override the detected OSVERSION.]),
 ,)
 
-AC_ARG_WITH(idlc-cpp,
-    AS_HELP_STRING([--with-idlc-cpp=<cpp/ucpp>],
-        [Specify the C Preprocessor to use for idlc. Default is ucpp.]),
-,)
-
 AC_ARG_WITH(parallelism,
     AS_HELP_STRING([--with-parallelism],
         [Number of jobs to run simultaneously during build. Parallel builds can
@@ -2808,30 +2845,10 @@ AC_ARG_WITH(macosx-version-min-required,
     AS_HELP_STRING([--with-macosx-version-min-required=<version>],
         [set the minimum OS version needed to run the built LibreOffice])
     [
-                          e. g.: --with-macosx-version-min-required=10.12
-    ],
-,)
-
-AC_ARG_WITH(macosx-version-max-allowed,
-    AS_HELP_STRING([--with-macosx-version-max-allowed=<version>],
-        [set the maximum allowed OS version the LibreOffice compilation can use APIs from])
-    [
-                          e. g.: --with-macosx-version-max-allowed=11.0
+                          e. g.: --with-macosx-version-min-required=10.13
     ],
 ,)
 
-
-dnl ===================================================================
-dnl options for stuff used during cross-compilation build
-dnl Not quite superseded by --with-build-platform-configure-options.
-dnl TODO: check, if the "force" option is still needed anywhere.
-dnl ===================================================================
-
-AC_ARG_WITH(system-icu-for-build,
-    AS_HELP_STRING([--with-system-icu-for-build=yes/no/force],
-        [Use icu already on system for build tools (cross-compilation only).]))
-
-
 dnl ===================================================================
 dnl Check for incompatible options set by fuzzing, and reset those
 dnl automatically to working combinations
@@ -2902,8 +2919,22 @@ if test -z "$BASH"; then
 fi
 AC_SUBST(BASH)
 
+# prefer parallel compression tools, if available
+AC_PATH_PROG(COMPRESSIONTOOL, pigz)
+if test -z "$COMPRESSIONTOOL"; then
+    AC_PATH_PROG(COMPRESSIONTOOL, gzip)
+    if test -z "$COMPRESSIONTOOL"; then
+        AC_MSG_ERROR([gzip not found in \$PATH])
+    fi
+fi
+AC_SUBST(COMPRESSIONTOOL)
+
+# use GNU parallel for packaging, if available
+AC_PATH_PROG(GNUPARALLEL, parallel)
+AC_SUBST(GNUPARALLEL)
+
 AC_MSG_CHECKING([for GNU or BSD tar])
-for a in $GNUTAR gtar gnutar bsdtar tar /usr/sfw/bin/gtar; do
+for a in $GNUTAR gtar gnutar tar bsdtar /usr/sfw/bin/gtar; do
     $a --version 2> /dev/null | egrep "GNU|bsdtar"  2>&1 > /dev/null
     if test $? -eq 0;  then
         GNUTAR=$a
@@ -2944,25 +2975,105 @@ dnl "desktop" one but a "mobile" one, we are always cross-compiling.
 dnl Note the direction of the implication; there is no assumption that
 dnl cross-compiling would imply a non-desktop OS.
 
-if test $_os != iOS -a $_os != Android -a $_os != Emscripten -a "$enable_fuzzers" != "yes"; then
+if test $_os != iOS -a $_os != Android -a "$enable_fuzzers" != "yes"; then
     BUILD_TYPE="$BUILD_TYPE DESKTOP"
     AC_DEFINE(HAVE_FEATURE_DESKTOP)
-    AC_DEFINE(HAVE_FEATURE_MULTIUSER_ENVIRONMENT)
+    if test "$_os" != Emscripten; then
+        AC_DEFINE(HAVE_FEATURE_MULTIUSER_ENVIRONMENT)
+    fi
 fi
 
-# Whether to build "avmedia" functionality or not.
+# explicitly doesn't include enable_gtk3=no and enable_qt5=yes, so it should
+# also work with the default gtk3 plugin.
+if test "$enable_wasm_strip" = "yes"; then
+    enable_avmedia=no
+    enable_cmis=no
+    enable_coinmp=no
+    enable_cups=no
+    test "$_os" = Emscripten && enable_curl=no
+    enable_database_connectivity=no
+    enable_dbus=no
+    enable_dconf=no
+    test "${enable_dynamic_loading+set}" = set -o "$_os" != Emscripten || enable_dynamic_loading=no
+    enable_extension_integration=no
+    enable_extensions=no
+    enable_extension_update=no
+    enable_gio=no
+    enable_gpgmepp=no
+    enable_ldap=no
+    enable_lotuswordpro=no
+    enable_lpsolve=no
+    enable_nss=no
+    enable_odk=no
+    enable_online_update=no
+    enable_opencl=no
+    enable_pdfimport=no
+    enable_randr=no
+    enable_report_builder=no
+    enable_scripting=no
+    enable_sdremote_bluetooth=no
+    enable_skia=no
+    enable_xmlhelp=no
+    enable_zxing=no
+    test_libepubgen=no
+    test_libcdr=no
+    test_libcmis=no
+    test_libetonyek=no
+    test_libfreehand=no
+    test_libmspub=no
+    test_libpagemaker=no
+    test_libqxp=no
+    test_libvisio=no
+    test_libzmf=no
+    test_webdav=no
+    with_galleries=no
+    with_webdav=no
+    with_x=no
+
+    test "${with_fonts+set}" = set || with_fonts=yes
+    test "${with_locales+set}" = set || with_locales=en
+
+    AC_DEFINE(ENABLE_WASM_STRIP_ACCESSIBILITY)
+    AC_DEFINE(ENABLE_WASM_STRIP_CANVAS)
+#    AC_DEFINE(ENABLE_WASM_STRIP_CHART)
+    AC_DEFINE(ENABLE_WASM_STRIP_DBACCESS)
+    AC_DEFINE(ENABLE_WASM_STRIP_EPUB)
+    AC_DEFINE(ENABLE_WASM_STRIP_EXTRA)
+    AC_DEFINE(ENABLE_WASM_STRIP_GUESSLANG)
+#    AC_DEFINE(ENABLE_WASM_STRIP_HUNSPELL)
+    AC_DEFINE(ENABLE_WASM_STRIP_PINGUSER)
+    AC_DEFINE(ENABLE_WASM_STRIP_PREMULTIPLY)
+    AC_DEFINE(ENABLE_WASM_STRIP_RECENT)
+    AC_DEFINE(ENABLE_WASM_STRIP_RECOVERYUI)
+    AC_DEFINE(ENABLE_WASM_STRIP_SPLASH)
+    AC_DEFINE(ENABLE_WASM_STRIP_SWEXPORTS)
+fi
+
+EMSCRIPTEN_NEH_MAJOR=3
+EMSCRIPTEN_NEH_MINOR=1
+EMSCRIPTEN_NEH_TINY=3
+EMSCRIPTEN_NEH_VERSION="${EMSCRIPTEN_NEH_MAJOR}.${EMSCRIPTEN_NEH_MINOR}.${EMSCRIPTEN_NEH_TINY}"
+
+if test "$enable_wasm_exceptions" = yes; then
+    AC_MSG_CHECKING([if Emscripten version is at least $EMSCRIPTEN_NEH_VERSION for SjLj + native EH])
+    check_semantic_version_three_prefixed EMSCRIPTEN NEH
+    if test $? -ne 0; then
+        AC_MSG_ERROR([no, found $EMSCRIPTEN_VERSION])
+    else
+        AC_MSG_RESULT([yes ($EMSCRIPTEN_VERSION)])
+    fi
+    ENABLE_WASM_EXCEPTIONS=TRUE
+fi
+AC_SUBST(ENABLE_WASM_EXCEPTIONS)
 
-if test -z "$enable_avmedia"; then
-    enable_avmedia=yes
-fi
+# Whether to build "avmedia" functionality or not.
 
-BUILD_TYPE="$BUILD_TYPE AVMEDIA"
 if test "$enable_avmedia" = yes; then
+    BUILD_TYPE="$BUILD_TYPE AVMEDIA"
     AC_DEFINE(HAVE_FEATURE_AVMEDIA)
 else
-    USE_AVMEDIA_DUMMY='TRUE'
+    test_gstreamer_1_0=no
 fi
-AC_SUBST(USE_AVMEDIA_DUMMY)
 
 # Decide whether to build database connectivity stuff (including Base) or not.
 if test "$enable_database_connectivity" != no; then
@@ -2982,22 +3093,6 @@ if test -z "$enable_extensions"; then
     fi
 fi
 
-if test "$enable_extensions" = yes; then
-    BUILD_TYPE="$BUILD_TYPE EXTENSIONS"
-    AC_DEFINE(HAVE_FEATURE_EXTENSIONS)
-else
-    enable_extension_integration=no
-    enable_extension_update=no
-fi
-
-if test -z "$enable_scripting"; then
-    # Disable scripting for iOS unless specifically overridden
-    # with --enable-scripting.
-    if test $_os != iOS -o $_os = Emscripten; then
-        enable_scripting=yes
-    fi
-fi
-
 DISABLE_SCRIPTING=''
 if test "$enable_scripting" = yes; then
     BUILD_TYPE="$BUILD_TYPE SCRIPTING"
@@ -3020,9 +3115,34 @@ if test "$enable_dynamic_loading" = yes; then
     BUILD_TYPE="$BUILD_TYPE DYNLOADING"
 else
     DISABLE_DYNLOADING='TRUE'
+    if test $_os != iOS -a $_os != Android; then
+        enable_database_connectivity=no
+        enable_nss=no
+        enable_odk=no
+        enable_python=no
+        enable_skia=no
+        with_java=no
+    fi
 fi
 AC_SUBST(DISABLE_DYNLOADING)
 
+ENABLE_CUSTOMTARGET_COMPONENTS=
+if test "$enable_customtarget_components" = yes -a "$DISABLE_DYNLOADING" = TRUE; then
+    ENABLE_CUSTOMTARGET_COMPONENTS=TRUE
+    if test -n "$with_locales" -a "$with_locales" != en -a "$with_locales" != ALL; then
+        AC_MSG_ERROR([Currently just --with-locales=all or en is supported with --enable-customtarget-components])
+    fi
+fi
+AC_SUBST(ENABLE_CUSTOMTARGET_COMPONENTS)
+
+if test "$enable_extensions" = yes; then
+    BUILD_TYPE="$BUILD_TYPE EXTENSIONS"
+    AC_DEFINE(HAVE_FEATURE_EXTENSIONS)
+else
+    enable_extension_integration=no
+    enable_extension_update=no
+fi
+
 # remember SYSBASE value
 AC_SUBST(SYSBASE)
 
@@ -3150,7 +3270,7 @@ AC_SUBST(CCACHE_DEPEND_MODE)
 if test "$CCACHE" != "" -a -z "$SCCACHE"; then
     # e.g. (/home/rene/.config/ccache/ccache.conf) max_size = 20.0G
     # -p works with both 4.2 and 4.4
-    ccache_size_msg=$([ccache -p | $AWK /max_size/'{ print $4 }' | sed -e 's/\.[0-9]*//'])
+    ccache_size_msg=$([$CCACHE -p | $AWK /max_size/'{ print $4 }' | sed -e 's/\.[0-9]*//'])
     ccache_size=$(echo "$ccache_size_msg" | grep "G" | sed -e 's/G.*$//')
     if test "$ccache_size" = ""; then
         ccache_size=$(echo "$ccache_size_msg" | grep "M" | sed -e 's/\ M.*$//')
@@ -3326,16 +3446,12 @@ if test $_os = Darwin; then
 
     if test "$with_macosx_version_min_required" = "" ; then
         if test "$host_cpu" = x86_64; then
-            with_macosx_version_min_required="10.12";
+            with_macosx_version_min_required="10.13";
         else
             with_macosx_version_min_required="11.0";
         fi
     fi
 
-    if test "$with_macosx_version_max_allowed" = "" ; then
-        with_macosx_version_max_allowed="$macosx_sdk"
-    fi
-
     # export this so that "xcrun" invocations later return matching values
     DEVELOPER_DIR="${MACOSX_SDK_PATH%/SDKs*}"
     DEVELOPER_DIR="${DEVELOPER_DIR%/Platforms*}"
@@ -3347,16 +3463,13 @@ if test $_os = Darwin; then
     my_xcode_ver1=$(xcrun xcodebuild -version | head -n 1)
     my_xcode_ver2=${my_xcode_ver1#Xcode }
     my_xcode_ver3=$(printf %s "$my_xcode_ver2" | $AWK -F. '{ print $1*100+($2<100?$2:99) }')
-    if test "$my_xcode_ver3" -ge 1103; then
+    if test "$my_xcode_ver3" -ge 1205; then
         AC_MSG_RESULT([yes ($my_xcode_ver2)])
     else
-        AC_MSG_ERROR(["$my_xcode_ver1" is too old or unrecognized, must be at least Xcode 11.3])
+        AC_MSG_ERROR(["$my_xcode_ver1" is too old or unrecognized, must be at least Xcode 12.5])
     fi
 
     case "$with_macosx_version_min_required" in
-    10.12)
-        MAC_OS_X_VERSION_MIN_REQUIRED="101200"
-        ;;
     10.13)
         MAC_OS_X_VERSION_MIN_REQUIRED="101300"
         ;;
@@ -3427,57 +3540,13 @@ if test $_os = Darwin; then
         RANLIB=`xcrun -find ranlib`
     fi
 
-    case "$with_macosx_version_max_allowed" in
-    10.12)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101200"
-        ;;
-    10.13)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101300"
-        ;;
-    10.14)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101400"
-        ;;
-    10.15)
-        MAC_OS_X_VERSION_MAX_ALLOWED="101500"
-        ;;
-    11.0)
-        MAC_OS_X_VERSION_MAX_ALLOWED="110000"
-        ;;
-    11.1)
-        MAC_OS_X_VERSION_MAX_ALLOWED="110100"
-        ;;
-    11.3)
-        MAC_OS_X_VERSION_MAX_ALLOWED="110300"
-        ;;
-    12.0)
-        MAC_OS_X_VERSION_MAX_ALLOWED="120000"
-        ;;
-    12.1)
-        MAC_OS_X_VERSION_MAX_ALLOWED="120100"
-        ;;
-    12.3)
-        MAC_OS_X_VERSION_MAX_ALLOWED="120300"
-        ;;
-    *)
-        AC_MSG_ERROR([with-macosx-version-max-allowed $with_macosx_version_max_allowed is not a supported value, supported values are 10.12--12.3])
-        ;;
-    esac
-
-    AC_MSG_CHECKING([that macosx-version-min-required is coherent with macosx-version-max-allowed])
-    if test $MAC_OS_X_VERSION_MIN_REQUIRED -gt $MAC_OS_X_VERSION_MAX_ALLOWED; then
-        AC_MSG_ERROR([the version minimum required, $MAC_OS_X_VERSION_MIN_REQUIRED, must be <= the version maximum allowed, $MAC_OS_X_VERSION_MAX_ALLOWED])
-    else
-        AC_MSG_RESULT([ok])
-    fi
-
-    AC_MSG_CHECKING([that macosx-version-max-allowed is coherent with macos-with-sdk])
-    if test $MAC_OS_X_VERSION_MAX_ALLOWED -gt $MACOSX_SDK_VERSION; then
-        AC_MSG_ERROR([the version maximum allowed cannot be greater than the sdk level])
+    AC_MSG_CHECKING([that macosx-version-min-required is coherent with macos-with-sdk])
+    if test $MAC_OS_X_VERSION_MIN_REQUIRED -gt $MACOSX_SDK_VERSION; then
+        AC_MSG_ERROR([the version minimum required cannot be greater than the sdk level])
     else
         AC_MSG_RESULT([ok])
     fi
     AC_MSG_NOTICE([MAC_OS_X_VERSION_MIN_REQUIRED=$MAC_OS_X_VERSION_MIN_REQUIRED])
-    AC_MSG_NOTICE([MAC_OS_X_VERSION_MAX_ALLOWED=$MAC_OS_X_VERSION_MAX_ALLOWED])
 
     AC_MSG_CHECKING([whether to do code signing])
 
@@ -3553,7 +3622,6 @@ fi
 AC_SUBST(MACOSX_SDK_PATH)
 AC_SUBST(MACOSX_DEPLOYMENT_TARGET)
 AC_SUBST(MAC_OS_X_VERSION_MIN_REQUIRED)
-AC_SUBST(MAC_OS_X_VERSION_MAX_ALLOWED)
 AC_SUBST(INSTALL_NAME_TOOL)
 AC_SUBST(LIBTOOL) # Note that the macOS libtool command is unrelated to GNU libtool
 AC_SUBST(MACOSX_CODESIGNING_IDENTITY)
@@ -3567,8 +3635,8 @@ dnl ===================================================================
 
 if test $_os = iOS; then
     AC_MSG_CHECKING([what iOS SDK to use])
-    current_sdk_ver=15.0
-    older_sdk_vers="14.5"
+    current_sdk_ver=15.5
+    older_sdk_vers="15.4 15.2 15.0 14.5"
     if test "$enable_ios_simulator" = "yes"; then
         platform=iPhoneSimulator
         versionmin=-mios-simulator-version-min=13.6
@@ -3826,14 +3894,13 @@ if test -n "$WIN_MULTI_ARCH" -a -n "$WIN_OTHER_ARCH"; then
 fi
 
 
-if test "$_os" = "iOS" -o "$build_cpu" != "$host_cpu"; then
+if test "$build_cpu" != "$host_cpu" -o "$DISABLE_DYNLOADING" = TRUE; then
     # To allow building Windows multi-arch releases without cross-tooling
-    if test -z "$WIN_MULTI_ARCH" -a -z "$WIN_OTHER_ARCH"; then
+    if test "$DISABLE_DYNLOADING" = TRUE -o \( -z "$WIN_MULTI_ARCH" -a -z "$WIN_OTHER_ARCH" \); then
         cross_compiling="yes"
     fi
 fi
 
-ENABLE_WASM_STRIP=''
 if test "$cross_compiling" = "yes"; then
     export CROSS_COMPILING=TRUE
     if test "$enable_dynamic_loading" != yes -a "$enable_wasm_strip" = yes; then
@@ -4193,6 +4260,7 @@ if test "$_os" = "WINNT"; then
         AC_MSG_ERROR([Visual C++ not found after all, huh])
     fi
 
+    # ERROR if VS version < 16.5
     AC_MSG_CHECKING([$CC_BASE is at least Visual Studio 2019 version 16.5])
     AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
         // See <https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros> for mapping
@@ -4202,6 +4270,21 @@ if test "$_os" = "WINNT"; then
         #endif
     ]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([no])])
 
+    # WARN if VS version < 16.10
+    AC_MSG_CHECKING([$CC_BASE is at least Visual Studio 2019 version 16.10])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
+        #if _MSC_VER < 1929
+        #error
+        #endif
+    ]])],[vs2019_recommended_version=yes],[vs2019_recommended_version=no])
+
+    if test $vs2019_recommended_version = yes; then
+        AC_MSG_RESULT([yes])
+    else
+        AC_MSG_WARN([no])
+        add_warning "You should have at least Visual Studio 2019 version 16.10 to avoid build problems. Otherwise, you may face problems with the build of some modules including dragonbox."
+    fi
+
     # Check for 64-bit (cross-)compiler to use to build the 64-bit
     # version of the Explorer extension (and maybe other small
     # bits, too) needed when installing a 32-bit LibreOffice on a
@@ -4244,7 +4327,6 @@ if test "$_os" = "WINNT"; then
         elif test -n "$WIN_MULTI_ARCH"; then
             BUILD_X86=TRUE
             CXX_X86_BINARY=`win_short_path_for_make "$MSVC_MULTI_PATH/cl.exe"`
-            CXX_X86_BINARY+=" /arch:SSE"
             AC_MSG_RESULT([found])
         else
             AC_MSG_RESULT([not found])
@@ -4277,7 +4359,6 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
     [AC_MSG_RESULT([no])])
 AC_SUBST(COM_IS_CLANG)
 
-CC_PLAIN=$CC
 CLANGVER=
 if test "$COM_IS_CLANG" = TRUE; then
     AC_MSG_CHECKING([whether Clang is new enough])
@@ -4295,29 +4376,17 @@ if test "$COM_IS_CLANG" = TRUE; then
         if test "$_os" = WINNT; then
             dnl In which case, assume clang-cl:
             my_args="/EP /TC"
-            dnl Filter out -FIIntrin.h, which needs to be explicitly stated for
-            dnl clang-cl:
-            CC_PLAIN=
-            for i in $CC; do
-                case $i in
-                -FIIntrin.h)
-                    ;;
-                *)
-                    CC_PLAIN="$CC_PLAIN $i"
-                    ;;
-                esac
-            done
         else
             my_args="-E -P"
         fi
-        clang_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $CC_PLAIN $my_args - | sed 's/ //g'`
-        CLANG_FULL_VERSION=`echo __clang_version__ | $CC_PLAIN $my_args -`
+        clang_version=`echo __clang_major__.__clang_minor__.__clang_patchlevel__ | $CC $my_args - | sed 's/ //g'`
+        CLANG_FULL_VERSION=`echo __clang_version__ | $CC $my_args -`
         CLANGVER=`echo $clang_version \
             | $AWK -F. '{ print \$1*10000+(\$2<100?\$2:99)*100+(\$3<100?\$3:99) }'`
-        if test "$CLANGVER" -ge 50002; then
+        if test "$CLANGVER" -ge 80001; then
             AC_MSG_RESULT([yes ($clang_version)])
         else
-            AC_MSG_ERROR(["$CLANG_FULL_VERSION" is too old or unrecognized, must be at least Clang 5.0.2])
+            AC_MSG_ERROR(["$CLANG_FULL_VERSION" is too old or unrecognized, must be at least Clang 8.0.1])
         fi
         AC_DEFINE_UNQUOTED(CLANG_VERSION,$CLANGVER)
         AC_DEFINE_UNQUOTED(CLANG_FULL_VERSION,$CLANG_FULL_VERSION)
@@ -4330,7 +4399,7 @@ if test "$_os" = WINNT; then
     dnl localized
     AC_MSG_CHECKING([the dependency generation prefix (cl.exe -showIncludes)])
     echo "#include <stdlib.h>" > conftest.c
-    SHOWINCLUDES_PREFIX=`$CC_PLAIN $CFLAGS -c -showIncludes conftest.c 2>/dev/null | \
+    SHOWINCLUDES_PREFIX=`$CC $CFLAGS -c -showIncludes conftest.c 2>/dev/null | \
         grep 'stdlib\.h' | head -n1 | sed 's/ [[[:alpha:]]]:.*//'`
     rm -f conftest.c conftest.obj
     if test -z "$SHOWINCLUDES_PREFIX"; then
@@ -4522,7 +4591,7 @@ fi
 AC_SUBST(ENABLE_DEBUG)
 
 dnl ===================================================================
-dnl Select the linker to use (gold/lld/ld.bfd).
+dnl Select the linker to use (gold/lld/ld.bfd/mold).
 dnl This is done only after compiler checks (need to know if Clang is
 dnl used, for different defaults) and after checking if a debug build
 dnl is wanted (non-debug builds get the default linker if not explicitly
@@ -4534,7 +4603,19 @@ check_use_ld()
     use_ld=-fuse-ld=${1%%:*}
     use_ld_path=${1#*:}
     if test "$use_ld_path" != "$1"; then
-        use_ld="$use_ld --ld-path=$use_ld_path"
+        if test "$COM_IS_CLANG" = TRUE; then
+            if test "$CLANGVER" -ge 120000; then
+                use_ld="${use_ld} --ld-path=${use_ld_path}"
+            else
+                use_ld="-fuse-ld=${use_ld_path}"
+            fi
+        else
+            # I tried to use gcc's '-B<path>' and a directory + symlink setup in
+            # $BUILDDIR, but libtool always filtered-out that option, so gcc wouldn't
+            # pickup the alternative linker, when called by libtool for linking.
+            # For mold, one can use LD_PRELOAD=/usr/lib/mold/mold-wrapper.so instead.
+            AC_MSG_ERROR([A linker path is just supported with clang, because of libtool's -B filtering!])
+        fi
     fi
     use_ld_fail_if_error=$2
     use_ld_ok=
@@ -4565,7 +4646,7 @@ printf ("hello world\n");
 }
 USE_LD=
 if test "$enable_ld" != "no"; then
-    if test "$GCC" = "yes"; then
+    if test "$GCC" = "yes" -a "$_os" != "Emscripten"; then
         if test -n "$enable_ld"; then
             check_use_ld "$enable_ld" fail_if_error
         elif test -z "$ENABLE_DEBUG$ENABLE_DBGUTIL"; then
@@ -4575,17 +4656,23 @@ if test "$enable_ld" != "no"; then
             check_use_ld lld
             if test $? -ne 0; then
                 check_use_ld gold
+                if test $? -ne 0; then
+                    check_use_ld mold
+                fi
             fi
         else
-            # For gcc first try gold, new versions also support lld.
+            # For gcc first try gold, new versions also support lld/mold.
             check_use_ld gold
             if test $? -ne 0; then
                 check_use_ld lld
+                if test $? -ne 0; then
+                    check_use_ld mold
+                fi
             fi
         fi
         ld_output=$(echo 'int main() { return 0; }' | $CC -Wl,-v -x c -o conftest.out - $CFLAGS $LDFLAGS 2>/dev/null)
         rm conftest.out
-        ld_used=$(echo "$ld_output" | grep -E '(^GNU gold|^GNU ld|^LLD)')
+        ld_used=$(echo "$ld_output" | grep -E '(^GNU gold|^GNU ld|^LLD|^mold)')
         if test -z "$ld_used"; then
             ld_used="unknown"
         fi
@@ -4593,8 +4680,8 @@ if test "$enable_ld" != "no"; then
         AC_MSG_RESULT([$ld_used])
         if test -n "$ENABLE_DEBUG$ENABLE_DBGUTIL"; then
             if echo "$ld_used" | grep -q "^GNU ld"; then
-                AC_MSG_WARN([The default GNU linker is slow, consider using the LLD or the GNU gold linker.])
-                add_warning "The default GNU linker is slow, consider using the LLD or the GNU gold linker."
+                AC_MSG_WARN([The default GNU linker is slow, consider using LLD, mold or the GNU gold linker.])
+                add_warning "The default GNU linker is slow, consider using LLD, mold or the GNU gold linker."
             fi
         fi
     else
@@ -4604,6 +4691,7 @@ if test "$enable_ld" != "no"; then
     fi
 fi
 AC_SUBST(USE_LD)
+AC_SUBST(LD)
 
 HAVE_LD_BSYMBOLIC_FUNCTIONS=
 if test "$GCC" = "yes" -a "$_os" != Emscripten ; then
@@ -4648,11 +4736,11 @@ printf ("hello world\n");
 fi
 AC_SUBST(LD_GC_SECTIONS)
 
-HAVE_GSPLIT_DWARF=
+HAVE_EXTERNAL_DWARF=
 if test "$enable_split_debug" != no; then
     use_split_debug=
     if test -n "$ENABLE_LTO"; then
-        true # Inherently incompatible, since no debug info is created while compiling, GCC complains.
+        : # Inherently incompatible, since no debug info is created while compiling, GCC complains.
     elif test "$enable_split_debug" = yes; then
         use_split_debug=1
     dnl Currently by default enabled only on Linux, feel free to set test_split_debug above also for other platforms.
@@ -4660,12 +4748,17 @@ if test "$enable_split_debug" != no; then
         use_split_debug=1
     fi
     if test -n "$use_split_debug"; then
-        AC_MSG_CHECKING([whether $CC_BASE supports -gsplit-dwarf])
+        if test "$_os" = "Emscripten"; then
+            TEST_CC_FLAG=-gseparate-dwarf
+        else
+            TEST_CC_FLAG=-gsplit-dwarf
+        fi
+        AC_MSG_CHECKING([whether $CC_BASE supports $TEST_CC_FLAG])
         save_CFLAGS=$CFLAGS
-        CFLAGS="$CFLAGS -Werror -gsplit-dwarf"
-        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_GCC_SPLIT_DWARF=TRUE ],[])
+        CFLAGS="$CFLAGS -Werror $TEST_CC_FLAG"
+        AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[ HAVE_EXTERNAL_DWARF=TRUE ],[])
         CFLAGS=$save_CFLAGS
-        if test "$HAVE_GCC_SPLIT_DWARF" = "TRUE"; then
+        if test "$HAVE_EXTERNAL_DWARF" = "TRUE"; then
             AC_MSG_RESULT([yes])
         else
             if test "$enable_split_debug" = yes; then
@@ -4675,12 +4768,12 @@ if test "$enable_split_debug" != no; then
             fi
         fi
     fi
-    if test -z "$HAVE_GCC_SPLIT_DWARF" -a "$test_split_debug" = "yes" -a -n "$use_split_debug"; then
+    if test -z "$HAVE_EXTERNAL_DWARF" -a "$test_split_debug" = "yes" -a -n "$use_split_debug"; then
         AC_MSG_WARN([Compiler is not capable of creating split debug info, linking will require more time and disk space.])
         add_warning "Compiler is not capable of creating split debug info, linking will require more time and disk space."
     fi
 fi
-AC_SUBST(HAVE_GCC_SPLIT_DWARF)
+AC_SUBST(HAVE_EXTERNAL_DWARF)
 
 HAVE_CLANG_DEBUG_INFO_KIND_CONSTRUCTOR=
 AC_MSG_CHECKING([whether $CC_BASE supports -Xclang -debug-info-kind=constructor])
@@ -4701,7 +4794,7 @@ if test "$enable_gdb_index" != "no"; then
     if test "$enable_gdb_index" = yes -o \( "$test_gdb_index" = "yes" -a -n "$ENABLE_DEBUG$ENABLE_DBGUTIL" \); then
         AC_MSG_CHECKING([whether $CC_BASE supports -ggnu-pubnames])
         save_CFLAGS=$CFLAGS
-        CFLAGS="$CFLAGS -Werror -ggnu-pubnames"
+        CFLAGS="$CFLAGS -Werror -g -ggnu-pubnames"
         have_ggnu_pubnames=
         AC_LINK_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],[have_ggnu_pubnames=TRUE],[have_ggnu_pubnames=])
         if test "$have_ggnu_pubnames" != "TRUE"; then
@@ -4840,7 +4933,7 @@ cygwin*|wsl*)
     # Already handled
     ;;
 
-darwin*|macos*)
+darwin*)
     COM=GCC
     OS=MACOSX
     RTL_OS=MacOSX
@@ -5091,6 +5184,12 @@ linux-gnu*|linux-musl*)
         RTL_ARCH=PowerPC_64_LE
         PLATFORMID=linux_powerpc64_le
         ;;
+    riscv64)
+        CPUNAME=RISCV64
+        PLATFORMID=linux_riscv64
+        RTL_ARCH=RISCV64
+        EPM_FLAGS="-a riscv64"
+        ;;
     sparc)
         CPUNAME=SPARC
         RTL_ARCH=SPARC
@@ -5265,10 +5364,6 @@ emscripten*)
     ;;
 esac
 
-if test "$with_x" = "no"; then
-    AC_MSG_ERROR([Use --disable-gui instead. How can we get rid of this option? No idea where it comes from.])
-fi
-
 DISABLE_GUI=""
 if test "$enable_gui" = "no"; then
     if test "$using_x11" != yes; then
@@ -5276,16 +5371,28 @@ if test "$enable_gui" = "no"; then
     fi
     USING_X11=
     DISABLE_GUI=TRUE
+    test_epoxy=no
 else
     AC_DEFINE(HAVE_FEATURE_UI)
 fi
 AC_SUBST(DISABLE_GUI)
 
+if test "$with_x" = "no"; then
+    USING_X11=
+fi
+
+if test -z "$USING_X11" -a "$DISABLE_DYNLOADING" = TRUE -a "$enable_gen" = "yes"; then
+    AC_MSG_ERROR([Can't select gen VCL plugin, if --without-x is used!])
+fi
+
 if test "$using_x11" = yes; then
     if test "$USING_X11" = TRUE; then
         AC_DEFINE(USING_X11)
     else
         disable_x11_tests
+        if test "$DISABLE_DYNLOADING" = TRUE; then
+            test_qt5=yes
+        fi
     fi
 else
     if test "$USING_X11" = TRUE; then
@@ -5297,7 +5404,6 @@ WORKDIR="${BUILDDIR}/workdir"
 INSTDIR="${BUILDDIR}/instdir"
 INSTROOTBASE=${INSTDIR}${INSTROOTBASESUFFIX}
 INSTROOT=${INSTROOTBASE}${INSTROOTCONTENTSUFFIX}
-SOLARINC="-I$SRC_ROOT/include $SOLARINC"
 AC_SUBST(COM)
 AC_SUBST(CPUNAME)
 AC_SUBST(RTL_OS)
@@ -5312,6 +5418,7 @@ AC_SUBST(P_SEP)
 AC_SUBST(WORKDIR)
 AC_SUBST(PLATFORMID)
 AC_SUBST(WINDOWS_X64)
+AC_DEFINE_UNQUOTED(SDKDIR, "$INSTDIR/$SDKDIRNAME")
 AC_DEFINE_UNQUOTED(WORKDIR,"$WORKDIR")
 
 if test "$OS" = WNT -a "$COM" = MSC; then
@@ -5412,8 +5519,9 @@ else
 fi
 
 AC_MSG_CHECKING([if we need to build the help index tooling])
-if test "$with_help" = yes -o "$enable_extension_integration" != no; then
+if test \( "$with_help" = yes -o "$enable_extension_integration" != no \) -a -z "$DISABLE_DYNLOADING"; then
     BUILD_TYPE="$BUILD_TYPE HELPTOOLS"
+    test_clucene=yes
     AC_MSG_RESULT([yes])
 else
     AC_MSG_RESULT([no])
@@ -5443,6 +5551,7 @@ fi
 AC_MSG_CHECKING([whether to include the XML-help support])
 if test "$enable_xmlhelp" = yes; then
     BUILD_TYPE="$BUILD_TYPE XMLHELP"
+    test_clucene=yes
     AC_DEFINE(HAVE_FEATURE_XMLHELP)
     AC_MSG_RESULT([yes])
 else
@@ -5498,6 +5607,7 @@ if test "$cross_compiling" = "yes"; then
         config_host/*.in \
         sysui/desktop/macosx/Info.plist.in \
         .vscode/vs-code-template.code-workspace.in \
+        solenv/lockfile/autoconf.h.in \
         ) \
     | (cd CONF-FOR-BUILD && tar xf -)
     cp configure CONF-FOR-BUILD
@@ -5525,9 +5635,9 @@ if test "$cross_compiling" = "yes"; then
     test -n "$enable_ccache" && sub_conf_opts="$sub_conf_opts --enable-ccache=$enable_ccache"
     test -n "$with_ant_home" && sub_conf_opts="$sub_conf_opts --with-ant-home=$with_ant_home"
     test "$with_junit" = "no" && sub_conf_opts="$sub_conf_opts --without-junit"
+    # While we don't need scripting support, we don't have a PYTHON_FOR_BUILD Java equivalent, so must enable scripting for Java
     if test -n "$ENABLE_JAVA"; then
         case "$_os" in
-        iOS) sub_conf_opts="$sub_conf_opts --without-java" ;; # force it off, like it used to be
         Android)
             # Hack for Android - the build doesn't need a host JDK, so just forward to build for convenience
             test -n "$with_jdk_home" && sub_conf_opts="$sub_conf_opts --with-jdk-home=$with_jdk_home"
@@ -5539,25 +5649,34 @@ if test "$cross_compiling" = "yes"; then
             ;;
         esac
     else
-        sub_conf_opts="$sub_conf_opts --without-java"
+        sub_conf_opts="$sub_conf_opts --disable-scripting"
     fi
     test -n "$TARFILE_LOCATION" && sub_conf_opts="$sub_conf_opts --with-external-tar=$TARFILE_LOCATION"
-    test "$with_system_icu_for_build" = "yes" -o "$with_system_icu_for_build" = "force" && sub_conf_opts="$sub_conf_opts --with-system-icu"
     test "$with_galleries" = "no" -o -z "$WITH_GALLERY_BUILD" && sub_conf_opts="$sub_conf_opts --with-galleries=no --disable-database-connectivity"
     test -n "$with_help" -a "$with_help" != "no" && sub_conf_opts="$sub_conf_opts --with-help=$with_help"
     test "$enable_extensions" = yes || sub_conf_opts="$sub_conf_opts --disable-extensions"
+    test "${enable_ld+set}" = set -a "$build_cpu" = "$host_cpu" && sub_conf_opts="$sub_conf_opts --enable-ld=${enable_ld}"
+    test "${enable_pch+set}" = set && sub_conf_opts="$sub_conf_opts --enable-pch=${enable_pch}"
     test "$enable_wasm_strip" = "yes" && sub_conf_opts="$sub_conf_opts --enable-wasm-strip"
+    test "${with_system_lockfile+set}" = set && sub_conf_opts="$sub_conf_opts --with-system-lockfile=${with_system_lockfile}"
+    test "${enable_fuzzers}" = yes && sub_conf_opts="$sub_conf_opts --without-system-libxml"
+    if test "$_os" = "Emscripten"; then
+        sub_conf_opts="$sub_conf_opts --without-system-libxml --without-system-fontconfig --without-system-freetype --without-system-zlib"
+    fi
 
     # Don't bother having configure look for stuff not needed for the build platform anyway
+    # WARNING: any option with an argument containing spaces must be handled separately (see --with-theme)
     sub_conf_defaults=" \
         --build="$build_alias" \
         --disable-cairo-canvas \
         --disable-cups \
+        --disable-customtarget-components \
         --disable-firebird-sdbc \
         --disable-gpgmepp \
         --disable-gstreamer-1-0 \
         --disable-gtk3 \
         --disable-gtk4 \
+        --disable-libcmis \
         --disable-mariadb-sdbc \
         --disable-nss \
         --disable-online-update \
@@ -5565,16 +5684,27 @@ if test "$cross_compiling" = "yes"; then
         --disable-pdfimport \
         --disable-postgresql-sdbc \
         --disable-skia \
+        --disable-xmlhelp \
+        --enable-dynamic-loading \
         --enable-icecream="$enable_icecream" \
         --without-doxygen \
         --without-webdav \
-        --with-parallelism="$with_parallelism" \
-        --with-theme="$with_theme" \
+        --without-x \
         --with-tls=openssl \
 "
-    echo "    Running CONF-FOR-BUILD/configure" $sub_conf_defaults $sub_conf_opts $with_build_platform_configure_options --srcdir=$srcdir
+    # single quotes added for better readability in case of spaces
+    echo "    Running CONF-FOR-BUILD/configure" \
+        $sub_conf_defaults \
+        --with-parallelism="'$with_parallelism'" \
+        --with-theme="'$with_theme'" \
+        $sub_conf_opts \
+        $with_build_platform_configure_options \
+        --srcdir=$srcdir
+
     ./configure \
         $sub_conf_defaults \
+        --with-parallelism="$with_parallelism" \
+        --with-theme="$with_theme" \
         $sub_conf_opts \
         $with_build_platform_configure_options \
         --srcdir=$srcdir \
@@ -5593,6 +5723,7 @@ if test "$cross_compiling" = "yes"; then
         CURL
         DBCONNECTIVITY
         DESKTOP
+        DRAGONBOX
         DYNLOADING
         EPOXY
         EXPAT
@@ -5607,6 +5738,8 @@ if test "$cross_compiling" = "yes"; then
         LibO
         LIBFFI
         LIBPN
+        LIBTIFF
+        LIBWEBP
         LIBXML2
         LIBXSLT
         MDDS
@@ -5640,6 +5773,7 @@ if test "$cross_compiling" = "yes"; then
         JAVA_HOME
         JAVAIFLAGS
         JDK
+        JDK_SECURITYMANAGER_DISALLOWED
         LIBO_BIN_FOLDER
         LIBO_LIB_FOLDER
         LIBO_URE_LIB_FOLDER
@@ -5654,7 +5788,6 @@ if test "$cross_compiling" = "yes"; then
         ANT
         ANT_HOME
         ANT_LIB
-        HSQLDB_USE_JDBC_4_1
         JAVA_CLASSPATH_NOT_SET
         JAVA_SOURCE_VER
         JAVA_TARGET_VER
@@ -5662,6 +5795,10 @@ if test "$cross_compiling" = "yes"; then
         JAVACOMPILER
         JAVADOC
         JAVADOCISGJDOC
+        LOCKFILE
+        SYSTEM_GENBRK
+        SYSTEM_GENCCODE
+        SYSTEM_GENCMN
 "
     # these need some special handling
     EXTRA_HANDLED_SETTINGS="
@@ -5744,6 +5881,40 @@ AC_SUBST(CC_FOR_BUILD)
 AC_SUBST(CXX_FOR_BUILD)
 AC_SUBST(CPPU_ENV_FOR_BUILD)
 
+dnl ===================================================================
+dnl Check for lockfile deps
+dnl ===================================================================
+if test -z "$CROSS_COMPILING"; then
+    test -n "$LOCKFILE" -a "${with_system_lockfile+set}" != set && with_system_lockfile="$LOCKFILE"
+    test "${with_system_lockfile+set}" = set || with_system_lockfile=no
+    AC_MSG_CHECKING([which lockfile binary to use])
+    case "$with_system_lockfile" in
+    yes)
+        AC_MSG_RESULT([external])
+        AC_PATH_PROGS([LOCKFILE],[dotlockfile lockfile])
+        ;;
+    no)
+        AC_MSG_RESULT([internal])
+        ;;
+    *)
+        if test -x "$with_system_lockfile"; then
+            LOCKFILE="$with_system_lockfile"
+        else
+            AC_MSG_ERROR(['$with_system_lockfile' is not executable.])
+        fi
+        AC_MSG_RESULT([$with_system_lockfile])
+        ;;
+    esac
+fi
+
+if test -n "$LOCKFILE" -a "$DISABLE_DYNLOADING" = TRUE; then
+    add_warning "The default system lockfile has increasing poll intervals up to 60s, so linking executables may be delayed."
+fi
+
+AC_CHECK_HEADERS([getopt.h paths.h sys/param.h])
+AC_CHECK_FUNCS([utime utimes])
+AC_SUBST(LOCKFILE)
+
 dnl ===================================================================
 dnl Check for syslog header
 dnl ===================================================================
@@ -5815,6 +5986,16 @@ if test "$test_kf5" = "yes" -a "$enable_kf5" = "yes"; then
     fi
 fi
 
+AC_MSG_CHECKING([whether to build the pagein binaries for oosplash])
+if test "${enable_pagein}" != no -a -z "$DISABLE_DYNLOADING"; then
+    AC_MSG_RESULT([yes])
+    ENABLE_PAGEIN=TRUE
+    AC_DEFINE(HAVE_FEATURE_PAGEIN)
+else
+    AC_MSG_RESULT([no])
+fi
+AC_SUBST(ENABLE_PAGEIN)
+
 dnl ===================================================================
 dnl check for cups support
 dnl ===================================================================
@@ -5836,23 +6017,7 @@ fi
 
 AC_SUBST(ENABLE_CUPS)
 
-# fontconfig checks
-if test "$using_freetype_fontconfig" = yes; then
-    AC_MSG_CHECKING([which fontconfig to use])
-fi
-if test "$using_freetype_fontconfig" = yes -a "$test_system_fontconfig" != no; then
-    AC_MSG_RESULT([external])
-    PKG_CHECK_MODULES([FONTCONFIG], [fontconfig >= 2.4.1])
-    SYSTEM_FONTCONFIG=TRUE
-    FilterLibs "${FONTCONFIG_LIBS}"
-    FONTCONFIG_LIBS="${filteredlibs}"
-elif test "$using_freetype_fontconfig" = yes; then
-    AC_MSG_RESULT([internal])
-    BUILD_TYPE="$BUILD_TYPE FONTCONFIG"
-fi
-AC_SUBST(FONTCONFIG_CFLAGS)
-AC_SUBST(FONTCONFIG_LIBS)
-AC_SUBST([SYSTEM_FONTCONFIG])
+libo_CHECK_SYSTEM_MODULE([fontconfig],[FONTCONFIG],[fontconfig >= 2.4.1],,system,TRUE)
 
 dnl whether to find & fetch external tarballs?
 dnl ===================================================================
@@ -5958,7 +6123,7 @@ if test -z "$enable_pch"; then
     if test "$_os" = "WINNT"; then
         # Enabled by default on Windows.
         enable_pch=yes
-        # never use sccache on auto-enabled PCH builds, except if requested explicitely
+        # never use sccache on auto-enabled PCH builds, except if requested explicitly
         if test -z "$enable_ccache" -a "$SCCACHE"; then
             CCACHE=""
         fi
@@ -5966,6 +6131,9 @@ if test -z "$enable_pch"; then
         enable_pch=no
     fi
 fi
+if test "$enable_pch" != no -a "$_os" = Emscripten -a "$ENABLE_WASM_EXCEPTIONS" = TRUE; then
+    AC_MSG_ERROR([PCH currently isn't supported for Emscripten with native EH (nEH) because of missing Sj/Lj support with nEH in clang.])
+fi
 if test "$enable_pch" != "no" -a "$_os" != "WINNT" -a "$GCC" != "yes" ; then
     AC_MSG_ERROR([Precompiled header not yet supported for your platform/compiler])
 fi
@@ -6059,10 +6227,11 @@ if test -n "$BUILDING_PCH_WITH_OBJ"; then
     save_CFLAGS=$CFLAGS
     CFLAGS="$CFLAGS -Werror ${fpch_prefix}-fpch-codegen"
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],
-        [
-        PCH_CODEGEN="${fpch_prefix}-fpch-codegen"
-        PCH_NO_CODEGEN="${fpch_prefix}-fno-pch-codegen"
-        ],[])
+        [ PCH_CODEGEN="${fpch_prefix}-fpch-codegen" ],[])
+    CFLAGS=$save_CFLAGS
+    CFLAGS="$CFLAGS -Werror ${fpch_prefix}-fno-pch-codegen"
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[ return 0; ]])],
+        [ PCH_NO_CODEGEN="${fpch_prefix}-fno-pch-codegen" ],[])
     CFLAGS=$save_CFLAGS
     if test -n "$PCH_CODEGEN"; then
         AC_MSG_RESULT(yes)
@@ -6094,59 +6263,8 @@ _make_version=`$GNUMAKE --version | grep GNU | $GREP -v GPL | $SED -e 's@^[[^0-9
 _make_longver=`echo $_make_version | $AWK -F. '{ print \$1*10000+\$2*100+\$3 }'`
 if test "$_make_longver" -ge "038200"; then
     AC_MSG_RESULT([$GNUMAKE $_make_version])
-
-elif test "$_make_longver" -ge "038100"; then
-    if test "$build_os" = "cygwin"; then
-        AC_MSG_ERROR([failed ($GNUMAKE version >= 3.82 needed])
-    fi
-    AC_MSG_RESULT([$GNUMAKE $_make_version])
-
-    dnl ===================================================================
-    dnl Search all the common names for sha1sum
-    dnl ===================================================================
-    AC_CHECK_PROGS(SHA1SUM, sha1sum sha1 shasum openssl)
-    if test -z "$SHA1SUM"; then
-        AC_MSG_ERROR([install the appropriate SHA-1 checksumming program for this OS])
-    elif test "$SHA1SUM" = "openssl"; then
-        SHA1SUM="openssl sha1"
-    fi
-    AC_MSG_CHECKING([for GNU Make bug 20033])
-    TESTGMAKEBUG20033=`mktemp -d tmp.XXXXXX`
-    $SED -e "s/<TAB>/$TAB/g" > $TESTGMAKEBUG20033/Makefile << EOF
-A := \$(wildcard *.a)
-
-.PHONY: all
-all: \$(A:.a=.b)
-<TAB>@echo survived bug20033.
-
-.PHONY: setup
-setup:
-<TAB>@touch 1.a 2.a 3.a 4.a 5.a 6.a
-
-define d1
-@echo lala \$(1)
-@sleep 1
-endef
-
-define d2
-@echo tyty \$(1)
-@sleep 1
-endef
-
-%.b : %.a
-<TAB>\$(eval CHECKSUM := \$(word 1,\$(shell cat \$^ | $SHA1SUM))) \$(if \$(wildcard \$(CACHEDIR)/\$(CHECKSUM)),\
-<TAB>\$(call d1,\$(CHECKSUM)),\
-<TAB>\$(call d2,\$(CHECKSUM)))
-EOF
-    if test -z "`(cd $TESTGMAKEBUG20033 && $GNUMAKE setup && $GNUMAKE -j)|grep survived`"; then
-        no_parallelism_make="YES"
-        AC_MSG_RESULT([yes, disable parallelism])
-    else
-        AC_MSG_RESULT([no, keep parallelism enabled])
-    fi
-    rm -rf $TESTGMAKEBUG20033
 else
-    AC_MSG_ERROR([failed ($GNUMAKE version >= 3.81 needed])
+    AC_MSG_ERROR([failed ($GNUMAKE version >= 3.82 needed])
 fi
 
 # find if gnumake support file function
@@ -6302,6 +6420,9 @@ dnl ===================================================================
 if test "$_os" != "WINNT"; then
     PKG_PROG_PKG_CONFIG
 fi
+AC_SUBST(PKG_CONFIG)
+AC_SUBST(PKG_CONFIG_PATH)
+AC_SUBST(PKG_CONFIG_LIBDIR)
 
 if test "$_os" != "WINNT"; then
 
@@ -6309,27 +6430,20 @@ if test "$_os" != "WINNT"; then
     # /path/to/compiler/foo-gcc" you need to set the AR etc env vars
     # explicitly. Or put /path/to/compiler in PATH yourself.
 
-    # Use wrappers for LTO
-    if test "$ENABLE_LTO" = "TRUE" -a "$COM_IS_CLANG" != "TRUE"; then
-        AC_CHECK_TOOL(AR,gcc-ar)
-        AC_CHECK_TOOL(NM,gcc-nm)
-        AC_CHECK_TOOL(RANLIB,gcc-ranlib)
-    else
-        AC_CHECK_TOOL(AR,ar)
-        AC_CHECK_TOOL(NM,nm)
-        AC_CHECK_TOOL(RANLIB,ranlib)
+    toolprefix=gcc
+    if test "$COM_IS_CLANG" = "TRUE"; then
+        toolprefix=llvm
     fi
-    AC_CHECK_TOOL(OBJDUMP,objdump)
-    AC_CHECK_TOOL(READELF,readelf)
-    AC_CHECK_TOOL(STRIP,strip)
+    AC_CHECK_TOOLS(AR,$toolprefix-ar ar)
+    AC_CHECK_TOOLS(NM,$toolprefix-nm nm)
+    AC_CHECK_TOOLS(RANLIB,$toolprefix-ranlib ranlib)
+    AC_CHECK_TOOLS(OBJDUMP,$toolprefix-objdump objdump)
+    AC_CHECK_TOOLS(READELF,$toolprefix-readelf readelf)
+    AC_CHECK_TOOLS(STRIP,$toolprefix-strip strip)
 fi
 AC_SUBST(AR)
-AC_SUBST(LD)
 AC_SUBST(NM)
 AC_SUBST(OBJDUMP)
-AC_SUBST(PKG_CONFIG)
-AC_SUBST(PKG_CONFIG_PATH)
-AC_SUBST(PKG_CONFIG_LIBDIR)
 AC_SUBST(RANLIB)
 AC_SUBST(READELF)
 AC_SUBST(STRIP)
@@ -6484,7 +6598,7 @@ find_msms()
 
     case "$VCVER" in
         16.0 | 17.0)
-        my_msm_files="Microsoft_VC141_CRT_x86.msm Microsoft_VC142_CRT_x86.msm ${my_msm_files}"
+        my_msm_files="Microsoft_VC141_CRT_x86.msm Microsoft_VC142_CRT_x86.msm Microsoft_VC143_CRT_x86.msm ${my_msm_files}"
         ;;
     esac
     for f in $my_msm_files; do
@@ -6981,6 +7095,28 @@ AC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT2,$SAL_TYPES_ALIGNMENT2)
 AC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT4,$SAL_TYPES_ALIGNMENT4)
 AC_DEFINE_UNQUOTED(SAL_TYPES_ALIGNMENT8,$SAL_TYPES_ALIGNMENT8)
 
+dnl Calc jumbo sheets (1m+ rows) depend on 64 bit tools::Long .
+AC_MSG_CHECKING([whether jumbo sheets are supported])
+if test "$_os" != "WINNT"; then
+    if test $SAL_TYPES_SIZEOFLONG -gt 4; then
+        AC_MSG_RESULT([yes])
+        ENABLE_JUMBO_SHEETS=TRUE
+        AC_DEFINE(HAVE_FEATURE_JUMBO_SHEETS)
+    else
+        AC_MSG_RESULT([no])
+    fi
+else
+    if test $WIN_HOST_BITS -gt 32; then
+        # 64bit windows is special-cased for tools::Long because long is 32bit
+        AC_MSG_RESULT([yes])
+        ENABLE_JUMBO_SHEETS=TRUE
+        AC_DEFINE(HAVE_FEATURE_JUMBO_SHEETS)
+    else
+        AC_MSG_RESULT([no])
+    fi
+fi
+AC_SUBST(ENABLE_JUMBO_SHEETS)
+
 dnl ===================================================================
 dnl Check whether to enable runtime optimizations
 dnl ===================================================================
@@ -7246,6 +7382,7 @@ dnl ===================================================================
 
 AC_MSG_CHECKING([what the C++ library is])
 HAVE_LIBSTDCPP=
+HAVE_LIBCPP=
 AC_LANG_PUSH([C++])
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <utility>
@@ -7265,7 +7402,8 @@ foo bar
 ]])],
     [CPP_LIBRARY=LIBCPP
      cpp_library_name="LLVM libc++"
-     AC_DEFINE([HAVE_LIBCXX])
+     AC_DEFINE([HAVE_LIBCPP])
+     HAVE_LIBCPP=TRUE
     ],
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
 #include <utility>
@@ -7280,11 +7418,65 @@ foo bar
 AC_MSG_RESULT([$cpp_library_name])
 AC_LANG_POP([C++])
 AC_SUBST([HAVE_LIBSTDCPP])
-
-dnl ===================================================================
-dnl Check for gperf
-dnl ===================================================================
-AC_PATH_PROG(GPERF, gperf)
+AC_SUBST([HAVE_LIBCPP])
+
+LIBCPP_DEBUG=
+if test -z "$CROSS_COMPILING" -a -n "$HAVE_LIBCPP" -a -n "$ENABLE_DBGUTIL"; then
+    # Libc++ has two levels of debug mode, assertions mode enabled with -D_LIBCPP_DEBUG=0,
+    # and actual debug mode enabled with -D_LIBCPP_DEBUG=1 (and starting with LLVM15
+    # assertions mode will be separate and controlled by -D_LIBCPP_ENABLE_ASSERTIONS=1,
+    # although there will be backwards compatibility).
+    # Debug mode is supported by libc++ only if built for it, e.g. Mac libc++ isn't,
+    # and there would be undefined references to debug functions.
+    # Moreover std::to_string() has a bug (https://reviews.llvm.org/D125184).
+    # So check if debug mode can be used and disable or downgrade it to assertions
+    # if needed.
+    AC_MSG_CHECKING([if libc++ has a usable debug mode])
+    AC_LANG_PUSH([C++])
+    libcpp_debug_links=
+    AC_LINK_IFELSE([AC_LANG_SOURCE([[
+#define _LIBCPP_DEBUG 0 // only assertions
+#include <vector>
+int main()
+{
+    std::vector<int> v;
+    v.push_back( 1 );
+    return v[ 3 ];
+}
+]])], [libcpp_debug_links=1])
+    if test -n "$libcpp_debug_links"; then
+        # we can use at least assertions, check if debug mode works
+        AC_RUN_IFELSE([AC_LANG_SOURCE([[
+#define _LIBCPP_DEBUG 1 // debug mode
+#include <string>
+#include <vector>
+int foo(const std::vector<int>& v) { return *v.begin(); }
+int main()
+{
+    std::vector<int> v;
+    v.push_back( 1 );
+    std::string s = "xxxxxxxxxxxxxxxxxxxxxxxxx" + std::to_string(10);
+    return (foo(v) + s.size()) != 0 ? 0 : 1;
+}
+]])],
+        [AC_MSG_RESULT(yes)
+         LIBCPP_DEBUG=-D_LIBCPP_DEBUG=1
+        ],
+        [AC_MSG_RESULT(no, using only assertions)
+         LIBCPP_DEBUG=-D_LIBCPP_DEBUG=0
+        ]
+        )
+    else
+        AC_MSG_RESULT(no)
+    fi
+    AC_LANG_POP([C++])
+fi
+AC_SUBST([LIBCPP_DEBUG])
+
+dnl ===================================================================
+dnl Check for gperf
+dnl ===================================================================
+AC_PATH_PROG(GPERF, gperf)
 if test -z "$GPERF"; then
     AC_MSG_ERROR([gperf not found but needed. Install it.])
 fi
@@ -7305,14 +7497,7 @@ AC_SUBST(GPERF)
 dnl ===================================================================
 dnl Check for system libcmis
 dnl ===================================================================
-# libcmis requires curl and we can't build curl for iOS
-if test "$test_cmis" = "yes" -a "$enable_cmis" = "yes"; then
-    libo_CHECK_SYSTEM_MODULE([libcmis],[LIBCMIS],[libcmis-0.5 >= 0.5.2])
-    ENABLE_LIBCMIS=TRUE
-else
-    ENABLE_LIBCMIS=
-fi
-AC_SUBST(ENABLE_LIBCMIS)
+libo_CHECK_SYSTEM_MODULE([libcmis],[LIBCMIS],[libcmis-0.5 >= 0.5.2],enabled)
 
 dnl ===================================================================
 dnl C++11
@@ -7386,31 +7571,6 @@ if test "$GCC" = "yes"; then
     AC_SUBST(ATOMIC_LIB)
 fi
 
-dnl Test for temporarily incompatible libstdc++ 4.7.{0,1}, where
-dnl <https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=179528> introduced
-dnl an additional member _M_size into C++11 std::list towards 4.7.0 and
-dnl <https://gcc.gnu.org/viewcvs/gcc?view=revision&revision=189186> removed it
-dnl again towards 4.7.2:
-if test $CPP_LIBRARY = GLIBCXX; then
-    AC_MSG_CHECKING([whether using C++11 causes libstdc++ 4.7.0/4.7.1 ABI breakage])
-    AC_LANG_PUSH([C++])
-    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
-#include <list>
-#if !defined __GLIBCXX__ || (__GLIBCXX__ != 20120322 && __GLIBCXX__ != 20120614)
-    // according to <https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html>:
-    //   GCC 4.7.0: 20120322
-    //   GCC 4.7.1: 20120614
-    // and using a range check is not possible as the mapping between
-    // __GLIBCXX__ values and GCC versions is not monotonic
-/* ok */
-#else
-abi broken
-#endif
-        ]])], [AC_MSG_RESULT(no, ok)],
-        [AC_MSG_ERROR(yes)])
-    AC_LANG_POP([C++])
-fi
-
 AC_MSG_CHECKING([whether $CXX_BASE supports C++11 without Language Defect 757])
 save_CXXFLAGS=$CXXFLAGS
 CXXFLAGS="$CXXFLAGS $CXXFLAGS_CXX11"
@@ -7657,9 +7817,7 @@ fi
 AC_SUBST([HAVE_BROKEN_GCC_WSTRINGOP_OVERFLOW])
 
 HAVE_DLLEXPORTINLINES=
-dnl At least for Clang 14 trunk, -Zc:dllexportInlines- would cause lots of unresolved symbols when
-dnl linking e.g. Library_cppuhelper, for whatever reason:
-if test "$_os" = "WINNT" && test "$COM_IS_CLANG" != TRUE; then
+if test "$_os" = "WINNT"; then
     AC_MSG_CHECKING([whether $CXX_BASE supports -Zc:dllexportInlines-])
     AC_LANG_PUSH([C++])
     save_CXXFLAGS=$CXXFLAGS
@@ -8097,9 +8255,10 @@ if test "$COM_IS_CLANG" = "TRUE"; then
         compiler_plugins=no
     fi
     if test "$compiler_plugins" != no -a "$my_apple_clang" != yes; then
-        if test "$CLANGVER" -lt 50002; then
+        if test "$CLANGVER" -lt 120001; then
             if test "$compiler_plugins" = yes; then
-                AC_MSG_ERROR([Clang $CLANGVER is too old to build compiler plugins; need >= 5.0.2.])
+                AC_MSG_ERROR(
+                    [Clang $CLANGVER is too old to build compiler plugins; need >= 12.0.1.])
             else
                 compiler_plugins=no
             fi
@@ -8392,7 +8551,7 @@ if test "$ENABLE_JAVA" != ""; then
         JAVAINTERPRETER=`win_short_path_for_make "$JAVAINTERPRETER"`
     elif test "$cross_compiling" != "yes"; then
         case $CPUNAME in
-            AARCH64|AXP|X86_64|HPPA|IA64|POWERPC64|S390X|SPARC64|GODSON64)
+            AARCH64|AXP|X86_64|HPPA|IA64|POWERPC64|S390X|SPARC64|GODSON64|RISCV64)
                 if test -f "$JAVAINTERPRETER" -a "`$JAVAINTERPRETER -version 2>&1 | $GREP -i 64-bit`" = "" >/dev/null; then
                     AC_MSG_WARN([You are building 64-bit binaries but the JDK $JAVAINTERPRETER is 32-bit])
                     AC_MSG_ERROR([You should pass the --with-jdk-home option pointing to a 64-bit JDK])
@@ -8414,6 +8573,7 @@ dnl ===================================================================
 
 # Whether all the complexity here actually is needed any more or not, no idea.
 
+JDK_SECURITYMANAGER_DISALLOWED=
 if test "$ENABLE_JAVA" != "" -a "$cross_compiling" != "yes"; then
     _gij_longver=0
     AC_MSG_CHECKING([the installed JDK])
@@ -8440,6 +8600,12 @@ if test "$ENABLE_JAVA" != "" -a "$cross_compiling" != "yes"; then
             if test "$_jdk_ver" -gt 10900; then
                 JAVA_CLASSPATH_NOT_SET=TRUE
             fi
+            dnl TODO: Presumably, the Security Manager will not merely be disallowed, but be
+            dnl completely removed in some Java version > 18 (see
+            dnl <https://openjdk.java.net/jeps/411> "Deprecate the Security Manager for Removal"):
+            if test "$_jdk_ver" -ge 180000; then
+                JDK_SECURITYMANAGER_DISALLOWED=TRUE
+            fi
 
             JAVA_HOME=`echo $JAVAINTERPRETER | $SED -n "s,//*bin//*java,,p"`
             if test "$_os" = "WINNT"; then
@@ -8690,7 +8856,7 @@ if test -n "$ENABLE_JAVA" -a -z "$JAVAINC"; then
         JAVAINC="$JAVAINC -I$JAVA_HOME/include"
         ;;
 
-    darwin*|macos*)
+    darwin*)
         if test -d "$JAVA_HOME/include/darwin"; then
             JAVAINC="-I$JAVA_HOME/include  -I$JAVA_HOME/include/darwin"
         else
@@ -8748,6 +8914,7 @@ if test "$ENABLE_JAVA" != "" -a "$cross_compiling" != "yes"; then
     JAVA_HOME_FOR_BUILD=$JAVA_HOME
     JAVAIFLAGS_FOR_BUILD=$JAVAIFLAGS
     JDK_FOR_BUILD=$JDK
+    JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD=$JDK_SECURITYMANAGER_DISALLOWED
 fi
 
 AC_SUBST(JAVACFLAGS)
@@ -8760,6 +8927,7 @@ AC_SUBST(JAVA_HOME)
 AC_SUBST(JAVA_HOME_FOR_BUILD)
 AC_SUBST(JDK)
 AC_SUBST(JDK_FOR_BUILD)
+AC_SUBST(JDK_SECURITYMANAGER_DISALLOWED_FOR_BUILD)
 AC_SUBST(JAVA_SOURCE_VER)
 AC_SUBST(JAVA_TARGET_VER)
 
@@ -8885,40 +9053,6 @@ else
     AC_MSG_RESULT([no])
 fi
 
-dnl ===================================================================
-dnl Check for C preprocessor to use
-dnl ===================================================================
-AC_MSG_CHECKING([which C preprocessor to use in idlc])
-SYSTEM_UCPP_IS_GCC=
-if test -n "$with_idlc_cpp"; then
-    AC_MSG_RESULT([$with_idlc_cpp])
-    AC_PATH_PROG(SYSTEM_UCPP, $with_idlc_cpp)
-    AC_MSG_CHECKING([if $with_idlc_cpp is GCC CPP])
-    # ucpp will accept -v (to output version), warn about the others as unknown
-    # and return 1 (due to -v)
-    # gcc will accept -v (as verbose), --version (to output version) and -nostdinc
-    # and return 0 (due to --version ) if all options are supported
-    $SYSTEM_UCPP -v --version -nostdinc >/dev/null 2>/dev/null
-    if test $? -eq 0;  then
-        SYSTEM_UCPP_IS_GCC=TRUE
-        AC_MSG_RESULT([yes])
-    else
-        AC_MSG_RESULT([no])
-    fi
-else
-    AC_MSG_RESULT([ucpp])
-    AC_MSG_CHECKING([which ucpp to use])
-    if test -n "$with_system_ucpp" -a "$with_system_ucpp" != "no"; then
-        AC_MSG_RESULT([external])
-        AC_PATH_PROG(SYSTEM_UCPP, ucpp)
-    else
-        AC_MSG_RESULT([internal])
-        BUILD_TYPE="$BUILD_TYPE UCPP"
-    fi
-fi
-AC_SUBST(SYSTEM_UCPP)
-AC_SUBST(SYSTEM_UCPP_IS_GCC)
-
 dnl ===================================================================
 dnl Check for epm (not needed for Windows)
 dnl ===================================================================
@@ -9046,6 +9180,17 @@ AC_SUBST(ENABLE_LWP)
 dnl ===================================================================
 dnl Check for building ODK
 dnl ===================================================================
+AC_MSG_CHECKING([whether to build the ODK])
+if test "$enable_odk" = yes; then
+    if test "$DISABLE_DYNLOADING" = TRUE; then
+        AC_MSG_ERROR([can't build ODK for --disable-dynamic-loading builds])
+    fi
+    AC_MSG_RESULT([yes])
+    BUILD_TYPE="$BUILD_TYPE ODK"
+else
+    AC_MSG_RESULT([no])
+fi
+
 if test "$enable_odk" != yes; then
     unset DOXYGEN
 else
@@ -9080,13 +9225,23 @@ else
 fi
 AC_SUBST([DOXYGEN])
 
-AC_MSG_CHECKING([whether to build the ODK])
-if test "$enable_odk" = yes; then
-    AC_MSG_RESULT([yes])
-    BUILD_TYPE="$BUILD_TYPE ODK"
-else
+dnl ==================================================================
+dnl libfuzzer
+dnl ==================================================================
+AC_MSG_CHECKING([whether to enable fuzzers])
+if test "$enable_fuzzers" != yes; then
     AC_MSG_RESULT([no])
+else
+    if test -z $LIB_FUZZING_ENGINE; then
+      AC_MSG_ERROR(['LIB_FUZZING_ENGINE' must be set when using --enable-fuzzers. Examples include '-fsanitize=fuzzer'.])
+    fi
+    AC_MSG_RESULT([yes])
+    ENABLE_FUZZERS="TRUE"
+    AC_DEFINE([ENABLE_FUZZERS],1)
+    AC_DEFINE([VCL_FLOAT_DEVICE_PIXEL],1)
+    BUILD_TYPE="$BUILD_TYPE FUZZERS"
 fi
+AC_SUBST(LIB_FUZZING_ENGINE)
 
 dnl ===================================================================
 dnl Check for system zlib
@@ -9326,18 +9481,8 @@ AC_SUBST(SYSTEM_LIBJPEG)
 dnl ===================================================================
 dnl Check for system clucene
 dnl ===================================================================
-dnl we should rather be using
-dnl libo_CHECK_SYSTEM_MODULE([clucence],[CLUCENE],[liblucence-core]) here
-dnl but the contribs-lib check seems tricky
-if test "$enable_xmlhelp" = yes -o "$enable_extension_integration" = yes; then
-AC_MSG_CHECKING([which clucene to use])
-if test "$with_system_clucene" = "yes"; then
-    AC_MSG_RESULT([external])
-    SYSTEM_CLUCENE=TRUE
-    PKG_CHECK_MODULES(CLUCENE, libclucene-core)
-    CLUCENE_CFLAGS=[$(printf '%s' "$CLUCENE_CFLAGS" | sed -e 's@-I[^ ]*/CLucene/ext@@' -e "s/-I/${ISYSTEM?}/g")]
-    FilterLibs "${CLUCENE_LIBS}"
-    CLUCENE_LIBS="${filteredlibs}"
+libo_CHECK_SYSTEM_MODULE([clucene],[CLUCENE],[libclucene-core])
+if test "$SYSTEM_CLUCENE" = TRUE; then
     AC_LANG_PUSH([C++])
     save_CXXFLAGS=$CXXFLAGS
     save_CPPFLAGS=$CPPFLAGS
@@ -9350,17 +9495,8 @@ if test "$with_system_clucene" = "yes"; then
     CXXFLAGS=$save_CXXFLAGS
     CPPFLAGS=$save_CPPFLAGS
     AC_LANG_POP([C++])
-
     CLUCENE_LIBS="$CLUCENE_LIBS -lclucene-contribs-lib"
-else
-    AC_MSG_RESULT([internal])
-    SYSTEM_CLUCENE=
-    BUILD_TYPE="$BUILD_TYPE CLUCENE"
-fi
 fi
-AC_SUBST(SYSTEM_CLUCENE)
-AC_SUBST(CLUCENE_CFLAGS)
-AC_SUBST(CLUCENE_LIBS)
 
 dnl ===================================================================
 dnl Check for system expat
@@ -9372,37 +9508,30 @@ dnl Check for system xmlsec
 dnl ===================================================================
 libo_CHECK_SYSTEM_MODULE([xmlsec], [XMLSEC], [xmlsec1-nss >= 1.2.28])
 
-AC_MSG_CHECKING([whether to enable Embedded OpenType support])
-if test "$_os" != "WINNT" -a "$_os" != "Darwin" -a "$enable_eot" = "yes"; then
-    ENABLE_EOT="TRUE"
-    AC_DEFINE([ENABLE_EOT])
-    AC_MSG_RESULT([yes])
-
-    libo_CHECK_SYSTEM_MODULE([libeot],[LIBEOT],[libeot >= 0.01])
-else
-    ENABLE_EOT=
-    AC_MSG_RESULT([no])
-fi
-AC_SUBST([ENABLE_EOT])
+libo_CHECK_SYSTEM_MODULE([eot],[LIBEOT],[libeot >= 0.01],disabled)
 
 dnl ===================================================================
 dnl Check for DLP libs
 dnl ===================================================================
+REVENGE_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/librevenge/inc"
 AS_IF([test "$COM" = "MSC"],
       [librevenge_libdir="${WORKDIR}/LinkTarget/Library"],
       [librevenge_libdir="${WORKDIR}/UnpackedTarball/librevenge/src/lib/.libs"]
 )
-libo_CHECK_SYSTEM_MODULE([librevenge],[REVENGE],[librevenge-0.0 >= 0.0.1],["-I${WORKDIR}/UnpackedTarball/librevenge/inc"],["-L${librevenge_libdir} -lrevenge-0.0"])
+REVENGE_LIBS_internal="-L${librevenge_libdir} -lrevenge-0.0"
+libo_CHECK_SYSTEM_MODULE([librevenge],[REVENGE],[librevenge-0.0 >= 0.0.1])
 
 libo_CHECK_SYSTEM_MODULE([libodfgen],[ODFGEN],[libodfgen-0.1])
 
 libo_CHECK_SYSTEM_MODULE([libepubgen],[EPUBGEN],[libepubgen-0.1])
 
+WPD_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/libwpd/inc"
 AS_IF([test "$COM" = "MSC"],
       [libwpd_libdir="${WORKDIR}/LinkTarget/Library"],
       [libwpd_libdir="${WORKDIR}/UnpackedTarball/libwpd/src/lib/.libs"]
 )
-libo_CHECK_SYSTEM_MODULE([libwpd],[WPD],[libwpd-0.10],["-I${WORKDIR}/UnpackedTarball/libwpd/inc"],["-L${libwpd_libdir} -lwpd-0.10"])
+WPD_LIBS_internal="-L${libwpd_libdir} -lwpd-0.10"
+libo_CHECK_SYSTEM_MODULE([libwpd],[WPD],[libwpd-0.10])
 
 libo_CHECK_SYSTEM_MODULE([libwpg],[WPG],[libwpg-0.3])
 
@@ -9415,7 +9544,7 @@ libo_CHECK_SYSTEM_MODULE([libcdr],[CDR],[libcdr-0.1])
 
 libo_CHECK_SYSTEM_MODULE([libmspub],[MSPUB],[libmspub-0.1])
 
-libo_CHECK_SYSTEM_MODULE([libmwaw],[MWAW],[libmwaw-0.3 >= 0.3.1])
+libo_CHECK_SYSTEM_MODULE([libmwaw],[MWAW],[libmwaw-0.3 >= 0.3.21])
 libo_PKG_VERSION([MWAW], [libmwaw-0.3], [0.3.21])
 
 libo_CHECK_SYSTEM_MODULE([libetonyek],[ETONYEK],[libetonyek-0.1])
@@ -9443,7 +9572,9 @@ dnl ===================================================================
 if test "$with_system_lcms2" != "yes"; then
     SYSTEM_LCMS2=
 fi
-libo_CHECK_SYSTEM_MODULE([lcms2],[LCMS2],[lcms2],["-I${WORKDIR}/UnpackedTarball/lcms2/include"],["-L${WORKDIR}/UnpackedTarball/lcms2/src/.libs -llcms2"])
+LCMS2_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/lcms2/include"
+LCMS2_LIBS_internal="-L${WORKDIR}/UnpackedTarball/lcms2/src/.libs -llcms2"
+libo_CHECK_SYSTEM_MODULE([lcms2],[LCMS2],[lcms2])
 if test "$GCC" = "yes"; then
     LCMS2_CFLAGS="${LCMS2_CFLAGS} -Wno-long-long"
 fi
@@ -9460,38 +9591,23 @@ fi
 
 dnl ===================================================================
 dnl Check whether freetype is available
+dnl
+dnl FreeType has 3 different kinds of versions
+dnl * release, like 2.4.10
+dnl * libtool, like 13.0.7 (this what pkg-config returns)
+dnl * soname
+dnl FreeType's docs/VERSION.DLL provides a table mapping between the three
+dnl
+dnl 9.9.3 is 2.2.0
+dnl When the minimal version is at least 2.8.1, remove Skia's check down below.
 dnl ===================================================================
-if test "$using_freetype_fontconfig" = yes; then
-    AC_MSG_CHECKING([which freetype to use])
-fi
-if test "$using_freetype_fontconfig" = yes -a "$test_system_freetype" != no; then
-    AC_MSG_RESULT([external])
-    # FreeType has 3 different kinds of versions
-    # * release, like 2.4.10
-    # * libtool, like 13.0.7 (this what pkg-config returns)
-    # * soname
-    # FreeType's docs/VERSION.DLL provides a table mapping between the three
-    #
-    # 9.9.3 is 2.2.0
-    # When the minimal version is at least 2.8.1, remove Skia's check down below.
-    PKG_CHECK_MODULES(FREETYPE, freetype2 >= 9.9.3)
-    FREETYPE_CFLAGS=$(printf '%s' "$FREETYPE_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
-    FilterLibs "${FREETYPE_LIBS}"
-    FREETYPE_LIBS="${filteredlibs}"
-    SYSTEM_FREETYPE=TRUE
-elif test "$using_freetype_fontconfig" = yes; then
-    AC_MSG_RESULT([internal])
-    FREETYPE_CFLAGS="${ISYSTEM}${WORKDIR}/UnpackedTarball/freetype/include"
-    if test "x$ac_config_site_64bit_host" = xYES; then
-        FREETYPE_LIBS="-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib64 -lfreetype"
-    else
-        FREETYPE_LIBS="-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib -lfreetype"
-    fi
-    BUILD_TYPE="$BUILD_TYPE FREETYPE"
+FREETYPE_CFLAGS_internal="${ISYSTEM}${WORKDIR}/UnpackedTarball/freetype/include"
+if test "x$ac_config_site_64bit_host" = xYES; then
+    FREETYPE_LIBS_internal="-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib64 -lfreetype"
+else
+    FREETYPE_LIBS_internal="-L${WORKDIR}/UnpackedTarball/freetype/instdir/lib -lfreetype"
 fi
-AC_SUBST(FREETYPE_CFLAGS)
-AC_SUBST(FREETYPE_LIBS)
-AC_SUBST([SYSTEM_FREETYPE])
+libo_CHECK_SYSTEM_MODULE([freetype],[FREETYPE],[freetype2 >= 9.9.3],,system,TRUE)
 
 # ===================================================================
 # Check for system libxslt
@@ -9600,7 +9716,7 @@ else
         LIBXML_LIBS="${WORKDIR}/UnpackedTarball/libxml2/win32/bin.msvc/libxml2.lib"
     else
         LIBXML_LIBS="-L${WORKDIR}/UnpackedTarball/libxml2/.libs -lxml2"
-        if test "$_os" = Android; then
+        if test "$DISABLE_DYNLOADING" = TRUE; then
             LIBXML_LIBS="$LIBXML_LIBS -lm"
         fi
     fi
@@ -9638,28 +9754,26 @@ if test "$build_os" != "cygwin" -a "$enable_python" != fully-internal; then
         fi
     fi
 fi
-AC_SUBST(PYTHON_FOR_BUILD)
 
 # Checks for Python to use for Pyuno
 AC_MSG_CHECKING([which Python to use for Pyuno])
 case "$enable_python" in
 no|disable)
-    if test -z $PYTHON_FOR_BUILD; then
+    if test -z "$PYTHON_FOR_BUILD" -a "$cross_compiling" != yes; then
         # Python is required to build LibreOffice. In theory we could separate the build-time Python
         # requirement from the choice whether to include Python stuff in the installer, but why
         # bother?
-        if test "$cross_compiling" = yes; then
-            enable_python=system
-        else
-            AC_MSG_ERROR([Python is required at build time.])
-        fi
+        AC_MSG_ERROR([Python is required at build time.])
     fi
     enable_python=no
     AC_MSG_RESULT([none])
     ;;
 ""|yes|auto)
-    if test "$DISABLE_SCRIPTING" = TRUE -a -n "$PYTHON_FOR_BUILD"; then
-        AC_MSG_RESULT([no, overridden by --disable-scripting])
+    if test "$DISABLE_SCRIPTING" = TRUE; then
+        if test -z "$PYTHON_FOR_BUILD" -a "$cross_compiling" != yes; then
+            AC_MSG_ERROR([Python support can't be disabled without cross-compiling or a system python.])
+        fi
+        AC_MSG_RESULT([none, overridden by --disable-scripting])
         enable_python=no
     elif test $build_os = cygwin; then
         dnl When building on Windows we don't attempt to use any installed
@@ -9801,6 +9915,22 @@ if test "$with_lxml" != no; then
     fi
 fi
 
+if test \( "$cross_compiling" = yes -a -z "$PYTHON_FOR_BUILD" \) -o "$enable_python" = internal; then
+    SYSTEM_PYTHON=
+    PYTHON_VERSION_MAJOR=3
+    PYTHON_VERSION_MINOR=8
+    PYTHON_VERSION=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.12
+    if ! grep -q -i python.*${PYTHON_VERSION} ${SRC_ROOT}/download.lst; then
+        AC_MSG_ERROR([PYTHON_VERSION ${PYTHON_VERSION} but no matching file in download.lst])
+    fi
+    AC_DEFINE_UNQUOTED([PYTHON_VERSION_STRING], [L"${PYTHON_VERSION}"])
+
+    # Embedded Python dies without Home set
+    if test "$HOME" = ""; then
+        export HOME=""
+    fi
+fi
+
 dnl By now enable_python should be "system", "internal" or "no"
 case $enable_python in
 system)
@@ -9827,22 +9957,10 @@ int main(int argc, char **argv) {
     ;;
 
 internal)
-    SYSTEM_PYTHON=
-    PYTHON_VERSION_MAJOR=3
-    PYTHON_VERSION_MINOR=8
-    PYTHON_VERSION=${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.10
-    if ! grep -q -i python.*${PYTHON_VERSION} ${SRC_ROOT}/download.lst; then
-        AC_MSG_ERROR([PYTHON_VERSION ${PYTHON_VERSION} but no matching file in download.lst])
-    fi
-    AC_DEFINE_UNQUOTED([PYTHON_VERSION_STRING], [L"${PYTHON_VERSION}"])
     BUILD_TYPE="$BUILD_TYPE PYTHON"
     if test "$OS" = LINUX -o "$OS" = WNT ; then
         BUILD_TYPE="$BUILD_TYPE LIBFFI"
     fi
-    # Embedded Python dies without Home set
-    if test "$HOME" = ""; then
-        export HOME=""
-    fi
     ;;
 no)
     DISABLE_PYTHON=TRUE
@@ -9856,6 +9974,7 @@ esac
 AC_SUBST(DISABLE_PYTHON)
 AC_SUBST(SYSTEM_PYTHON)
 AC_SUBST(PYTHON_CFLAGS)
+AC_SUBST(PYTHON_FOR_BUILD)
 AC_SUBST(PYTHON_LIBS)
 AC_SUBST(PYTHON_VERSION)
 AC_SUBST(PYTHON_VERSION_MAJOR)
@@ -9985,7 +10104,6 @@ dnl ===================================================================
 dnl Check for system hsqldb
 dnl ===================================================================
 if test "$with_java" != "no" -a "$cross_compiling" != "yes"; then
-    HSQLDB_USE_JDBC_4_1=
     AC_MSG_CHECKING([which hsqldb to use])
     if test "$with_system_hsqldb" = "yes"; then
         AC_MSG_RESULT([external])
@@ -10037,14 +10155,6 @@ if test "$with_java" != "no" -a "$cross_compiling" != "yes"; then
         SYSTEM_HSQLDB=
         BUILD_TYPE="$BUILD_TYPE HSQLDB"
         NEED_ANT=TRUE
-        AC_MSG_CHECKING([whether hsqldb should be built with JDBC 4.1])
-        javanumver=`$JAVAINTERPRETER -version 2>&1 | $AWK -v num=true -f $SRC_ROOT/solenv/bin/getcompver.awk`
-        if expr "$javanumver" '>=' 000100060000 > /dev/null; then
-            AC_MSG_RESULT([yes])
-            HSQLDB_USE_JDBC_4_1=TRUE
-        else
-            AC_MSG_RESULT([no])
-        fi
     fi
 else
     if test "$with_java" != "no" -a -z "$HSQLDB_JAR"; then
@@ -10053,7 +10163,6 @@ else
 fi
 AC_SUBST(SYSTEM_HSQLDB)
 AC_SUBST(HSQLDB_JAR)
-AC_SUBST([HSQLDB_USE_JDBC_4_1])
 
 dnl ===================================================================
 dnl Check for PostgreSQL stuff
@@ -10333,30 +10442,7 @@ AC_SUBST(LIBTOMMATH_LIBS)
 dnl ===================================================================
 dnl Check for system curl
 dnl ===================================================================
-AC_MSG_CHECKING([which libcurl to use])
-if test "$with_system_curl" = "auto"; then
-    with_system_curl="$with_system_libs"
-fi
-
-if test "$enable_curl" = "yes" -a "$with_system_curl" = "yes"; then
-    AC_MSG_RESULT([external])
-    SYSTEM_CURL=TRUE
-
-    PKG_CHECK_MODULES(CURL, libcurl >= 7.68.0)
-
-    ENABLE_CURL=TRUE
-elif test "$enable_curl" = "no"; then
-    AC_MSG_RESULT([none])
-else
-    AC_MSG_RESULT([internal])
-    SYSTEM_CURL=
-    BUILD_TYPE="$BUILD_TYPE CURL"
-    ENABLE_CURL=TRUE
-fi
-AC_SUBST(SYSTEM_CURL)
-AC_SUBST(CURL_CFLAGS)
-AC_SUBST(CURL_LIBS)
-AC_SUBST(ENABLE_CURL)
+libo_CHECK_SYSTEM_MODULE([curl],[CURL],[libcurl >= 7.68.0],enabled)
 
 dnl ===================================================================
 dnl Check for system boost
@@ -10398,7 +10484,8 @@ AC_SUBST(SYSTEM_BOOST)
 dnl ===================================================================
 dnl Check for system mdds
 dnl ===================================================================
-libo_CHECK_SYSTEM_MODULE([mdds], [MDDS], [mdds-2.0 >= 2.0.0], ["-I${WORKDIR}/UnpackedTarball/mdds/include"])
+MDDS_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/mdds/include"
+libo_CHECK_SYSTEM_MODULE([mdds],[MDDS],[mdds-2.0 >= 2.0.0])
 
 dnl ===================================================================
 dnl Check for system cuckoo
@@ -10415,11 +10502,51 @@ else
     AC_MSG_RESULT([internal])
     BUILD_TYPE="$BUILD_TYPE CUCKOO"
     SYSTEM_CUCKOO=
-    CUCKOO_CFLAGS="${ISYSTEM}${WORKDIR}/UnpackedTarball/cuckoo"
 fi
-AC_SUBST([CUCKOO_CFLAGS])
 AC_SUBST([SYSTEM_CUCKOO])
 
+dnl ===================================================================
+dnl Check for system dragonbox
+dnl ===================================================================
+AC_MSG_CHECKING([which dragonbox to use])
+if test "$with_system_dragonbox" = "yes"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_DRAGONBOX=TRUE
+    AC_LANG_PUSH([C++])
+    save_CPPFLAGS=$CPPFLAGS
+    # This is where upstream installs to, unfortunately no .pc or so...
+    DRAGONBOX_CFLAGS=-I/usr/include/dragonbox-1.0.0
+    CPPFLAGS="$CPPFLAGS $DRAGONBOX_CFLAGS"
+    AC_CHECK_HEADER([dragonbox/dragonbox.h], [],
+       [AC_MSG_ERROR([dragonbox/dragonbox.h not found. install dragonbox])], [])
+    AC_LANG_POP([C++])
+    CPPFLAGS=$save_CPPFLAGS
+else
+    AC_MSG_RESULT([internal])
+    BUILD_TYPE="$BUILD_TYPE DRAGONBOX"
+    SYSTEM_DRAGONBOX=
+fi
+AC_SUBST([SYSTEM_DRAGONBOX])
+AC_SUBST([DRAGONBOX_CFLAGS])
+
+dnl ===================================================================
+dnl Check for system libfixmath
+dnl ===================================================================
+AC_MSG_CHECKING([which libfixmath to use])
+if test "$with_system_libfixmath" = "yes"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_LIBFIXMATH=TRUE
+    AC_LANG_PUSH([C++])
+    AC_CHECK_HEADER([libfixmath/fix16.hpp], [],
+       [AC_MSG_ERROR([libfixmath/fix16.hpp not found. install libfixmath])], [])
+    AC_CHECK_LIB([libfixmath], [fix16_mul], [:], [AC_MSG_ERROR(libfixmath lib not found or functional)], [])
+    AC_LANG_POP([C++])
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_LIBFIXMATH=
+fi
+AC_SUBST([SYSTEM_LIBFIXMATH])
+
 dnl ===================================================================
 dnl Check for system glm
 dnl ===================================================================
@@ -10473,15 +10600,7 @@ dnl ===================================================================
 dnl Check for system NSS
 dnl ===================================================================
 if test "$enable_fuzzers" != "yes" -a "$enable_nss" = "yes"; then
-    libo_CHECK_SYSTEM_MODULE([nss],[NSS],[nss >= 3.9.3 nspr >= 4.8],,,[
-        case "$_os" in
-            Linux)
-                with_system_nss=yes
-            ;;
-            *)
-                with_system_nss=no
-            ;;
-        esac])
+    libo_CHECK_SYSTEM_MODULE([nss],[NSS],[nss >= 3.9.3 nspr >= 4.8],,system-if-linux)
     AC_DEFINE(HAVE_FEATURE_NSS)
     ENABLE_NSS=TRUE
 elif test $_os != iOS ; then
@@ -10544,8 +10663,8 @@ if test -n "$with_tls"; then
         fi
 
         # warn that OpenSSL has been selected but not all TLS code has this option
-        AC_MSG_WARN([TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS or GNUTLS])
-        add_warning "TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS or GNUTLS"
+        AC_MSG_WARN([TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS])
+        add_warning "TLS/SSL implementation to use is OpenSSL but some code may still depend on NSS"
         ;;
     nss)
         AC_DEFINE(USE_TLS_NSS)
@@ -10588,48 +10707,30 @@ fi
 dnl ===================================================================
 dnl Check for system icu
 dnl ===================================================================
-SYSTEM_GENBRK=
-SYSTEM_GENCCODE=
-SYSTEM_GENCMN=
-
-ICU_MAJOR=70
+ICU_MAJOR=71
 ICU_MINOR=1
 ICU_RECLASSIFIED_PREPEND_SET_EMPTY="TRUE"
 ICU_RECLASSIFIED_CONDITIONAL_JAPANESE_STARTER="TRUE"
 ICU_RECLASSIFIED_HEBREW_LETTER="TRUE"
-AC_MSG_CHECKING([which icu to use])
-if test "$with_system_icu" = "yes"; then
-    AC_MSG_RESULT([external])
-    SYSTEM_ICU=TRUE
+ICU_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/icu/source/i18n -I${WORKDIR}/UnpackedTarball/icu/source/common"
+ICU_LIBS_internal="-L${WORKDIR}/UnpackedTarball/icu/source/lib"
+libo_CHECK_SYSTEM_MODULE([icu],[ICU],[icu-i18n >= 4.6])
+if test "$SYSTEM_ICU" = TRUE; then
     AC_LANG_PUSH([C++])
     AC_MSG_CHECKING([for unicode/rbbi.h])
     AC_PREPROC_IFELSE([AC_LANG_SOURCE([[unicode/rbbi.h]])],[AC_MSG_RESULT([yes])],[AC_MSG_ERROR([icu headers not found])])
     AC_LANG_POP([C++])
 
-    if test "$cross_compiling" != "yes"; then
-        PKG_CHECK_MODULES(ICU, icu-i18n >= 4.6)
-        ICU_VERSION=`$PKG_CONFIG --modversion icu-i18n 2>/dev/null`
-        ICU_MAJOR=`echo $ICU_VERSION | cut -d"." -f1`
-        ICU_MINOR=`echo $ICU_VERSION | cut -d"." -f2`
-    fi
-
-    if test "$cross_compiling" = "yes" -a \( "$with_system_icu_for_build" = "yes" -o "$with_system_icu_for_build" = "force" \); then
-        ICU_VERSION_FOR_BUILD=`$PKG_CONFIG --modversion icu-i18n 2>/dev/null`
-        ICU_MAJOR_FOR_BUILD=`echo $ICU_VERSION_FOR_BUILD | cut -d"." -f1`
-        ICU_MINOR_FOR_BUILD=`echo $ICU_VERSION_FOR_BUILD | cut -d"." -f2`
-        AC_MSG_CHECKING([if MinGW and system versions of ICU are compatible])
-        if test "$ICU_MAJOR" -eq "$ICU_MAJOR_FOR_BUILD" -a "$ICU_MINOR" -eq "$ICU_MINOR_FOR_BUILD"; then
-            AC_MSG_RESULT([yes])
-        else
-            AC_MSG_RESULT([no])
-            if test "$with_system_icu_for_build" != "force"; then
-                AC_MSG_ERROR([System ICU is not version-compatible with MinGW ICU.
-You can use --with-system-icu-for-build=force to use it anyway.])
-            fi
-        fi
+    ICU_VERSION=`$PKG_CONFIG --modversion icu-i18n 2>/dev/null`
+    ICU_MAJOR=`echo $ICU_VERSION | cut -d"." -f1`
+    ICU_MINOR=`echo $ICU_VERSION | cut -d"." -f2`
+
+    if test "$ICU_MAJOR" -ge 50; then
+        AC_MSG_NOTICE([Ignore ICU_MINOR as obviously the libraries don't include the minor version in their names any more])
+        ICU_MINOR=
     fi
 
-    if test "$cross_compiling" != "yes" -o "$with_system_icu_for_build" = "yes" -o "$with_system_icu_for_build" = "force"; then
+    if test "$CROSS_COMPILING" != TRUE; then
         # using the system icu tools can lead to version confusion, use the
         # ones from the build environment when cross-compiling
         AC_PATH_PROG(SYSTEM_GENBRK, genbrk, [], [$PATH:/usr/sbin:/sbin])
@@ -10644,32 +10745,12 @@ You can use --with-system-icu-for-build=force to use it anyway.])
         if test -z "$SYSTEM_GENCMN"; then
             AC_MSG_ERROR([\'gencmn\' not found in \$PATH, install the icu development tool \'gencmn\'])
         fi
-        if test "$ICU_MAJOR" -ge "49"; then
-            ICU_RECLASSIFIED_PREPEND_SET_EMPTY="TRUE"
-            ICU_RECLASSIFIED_CONDITIONAL_JAPANESE_STARTER="TRUE"
-            ICU_RECLASSIFIED_HEBREW_LETTER="TRUE"
-        else
+        if test "$ICU_MAJOR" -lt 49; then
             ICU_RECLASSIFIED_PREPEND_SET_EMPTY=
             ICU_RECLASSIFIED_CONDITIONAL_JAPANESE_STARTER=
             ICU_RECLASSIFIED_HEBREW_LETTER=
         fi
     fi
-
-    if test "$cross_compiling" = "yes"; then
-        if test "$ICU_MAJOR" -ge "50"; then
-            AC_MSG_RESULT([Ignore ICU_MINOR as obviously the libraries don't include the minor version in their names any more])
-            ICU_MINOR=""
-        fi
-    fi
-else
-    AC_MSG_RESULT([internal])
-    SYSTEM_ICU=
-    BUILD_TYPE="$BUILD_TYPE ICU"
-    # surprisingly set these only for "internal" (to be used by various other
-    # external libs): the system icu-config is quite unhelpful and spits out
-    # dozens of weird flags and also default path -I/usr/include
-    ICU_CFLAGS="-I${WORKDIR}/UnpackedTarball/icu/source/i18n -I${WORKDIR}/UnpackedTarball/icu/source/common"
-    ICU_LIBS="-L${WORKDIR}/UnpackedTarball/icu/source/lib"
 fi
 if test "$ICU_MAJOR" -ge "59"; then
     # As of ICU 59 it defaults to typedef char16_t UChar; which is available
@@ -10680,7 +10761,6 @@ if test "$ICU_MAJOR" -ge "59"; then
 else
     ICU_UCHAR_TYPE=""
 fi
-AC_SUBST(SYSTEM_ICU)
 AC_SUBST(SYSTEM_GENBRK)
 AC_SUBST(SYSTEM_GENCCODE)
 AC_SUBST(SYSTEM_GENCMN)
@@ -10689,8 +10769,6 @@ AC_SUBST(ICU_MINOR)
 AC_SUBST(ICU_RECLASSIFIED_PREPEND_SET_EMPTY)
 AC_SUBST(ICU_RECLASSIFIED_CONDITIONAL_JAPANESE_STARTER)
 AC_SUBST(ICU_RECLASSIFIED_HEBREW_LETTER)
-AC_SUBST(ICU_CFLAGS)
-AC_SUBST(ICU_LIBS)
 AC_SUBST(ICU_UCHAR_TYPE)
 
 dnl ==================================================================
@@ -10729,24 +10807,6 @@ fi
 AC_SUBST(ENABLE_BREAKPAD)
 AC_SUBST(DEFAULT_CRASHDUMP_VALUE)
 
-dnl ==================================================================
-dnl libfuzzer
-dnl ==================================================================
-AC_MSG_CHECKING([whether to enable fuzzers])
-if test "$enable_fuzzers" != yes; then
-    AC_MSG_RESULT([no])
-else
-    if test -z $LIB_FUZZING_ENGINE; then
-      AC_MSG_ERROR(['LIB_FUZZING_ENGINE' must be set when using --enable-fuzzers. Examples include '-fsanitize=fuzzer'.])
-    fi
-    AC_MSG_RESULT([yes])
-    ENABLE_FUZZERS="TRUE"
-    AC_DEFINE([ENABLE_FUZZERS],1)
-    BUILD_TYPE="$BUILD_TYPE FUZZERS"
-fi
-AC_SUBST(LIB_FUZZING_ENGINE)
-AC_SUBST(ENABLE_FUZZERS)
-
 dnl ===================================================================
 dnl Orcus
 dnl ===================================================================
@@ -10768,13 +10828,14 @@ AC_SUBST(SYSTEM_LIBORCUS)
 dnl ===================================================================
 dnl HarfBuzz
 dnl ===================================================================
-libo_CHECK_SYSTEM_MODULE([graphite],[GRAPHITE],[graphite2 >= 0.9.3],
-                         ["-I${WORKDIR}/UnpackedTarball/graphite/include -DGRAPHITE2_STATIC"],
-                         ["-L${WORKDIR}/LinkTarget/StaticLibrary -lgraphite"])
 
-libo_CHECK_SYSTEM_MODULE([harfbuzz],[HARFBUZZ],[harfbuzz-icu >= 0.9.42],
-                         ["-I${WORKDIR}/UnpackedTarball/harfbuzz/src"],
-                         ["-L${WORKDIR}/UnpackedTarball/harfbuzz/src/.libs -lharfbuzz"])
+GRAPHITE_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/graphite/include -DGRAPHITE2_STATIC"
+GRAPHITE_LIBS_internal="-L${WORKDIR}/LinkTarget/StaticLibrary -lgraphite"
+libo_CHECK_SYSTEM_MODULE([graphite],[GRAPHITE],[graphite2 >= 0.9.3])
+
+HARFBUZZ_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/harfbuzz/src"
+HARFBUZZ_LIBS_internal="-L${WORKDIR}/UnpackedTarball/harfbuzz/src/.libs -lharfbuzz"
+libo_CHECK_SYSTEM_MODULE([harfbuzz],[HARFBUZZ],[harfbuzz-icu >= 0.9.42])
 
 if test "$COM" = "MSC"; then # override the above
     GRAPHITE_LIBS="${WORKDIR}/LinkTarget/StaticLibrary/graphite.lib"
@@ -10886,52 +10947,23 @@ AC_SUBST(XRANDR_CFLAGS)
 AC_SUBST(XRANDR_LIBS)
 AC_SUBST(ENABLE_RANDR)
 
-if test "$test_webdav" = yes; then
-    if test -z "$with_webdav"; then
-        WITH_WEBDAV=curl
-    else
-        WITH_WEBDAV="$with_webdav"
-    fi
+if test -z "$with_webdav"; then
+    with_webdav=$test_webdav
 fi
 
-AC_MSG_CHECKING([for webdav library])
-case "$WITH_WEBDAV" in
-curl)
-    AC_MSG_RESULT([curl])
+AC_MSG_CHECKING([for WebDAV support])
+case "$with_webdav" in
+no)
+    AC_MSG_RESULT([no])
+    WITH_WEBDAV=""
+    ;;
+*)
+    AC_MSG_RESULT([yes])
     # curl is already mandatory (almost) and checked elsewhere
     if test "$enable_curl" = "no"; then
-        AC_MSG_ERROR(["--with-webdav=curl conflicts with --disable-curl"])
+        AC_MSG_ERROR(["--with-webdav conflicts with --disable-curl"])
     fi
-    ;;
-serf)
-    AC_MSG_RESULT([serf])
-    # Check for system apr-util
-    libo_CHECK_SYSTEM_MODULE([apr],[APR],[apr-util-1],
-                             ["-I${WORKDIR}/UnpackedTarball/apr/include -I${WORKDIR}/UnpackedTarball/apr_util/include"],
-                             ["-L${WORKDIR}/UnpackedTarball/apr/.libs -lapr-1 -L${WORKDIR}/UnpackedTarball/apr_util/.libs -laprutil-1"])
-    if test "$COM" = "MSC"; then
-        APR_LIB_DIR="LibR"
-        test -n "${MSVC_USE_DEBUG_RUNTIME}" && APR_LIB_DIR="LibD"
-        APR_LIBS="${WORKDIR}/UnpackedTarball/apr/${APR_LIB_DIR}/apr-1.lib ${WORKDIR}/UnpackedTarball/apr_util/${APR_LIB_DIR}/aprutil-1.lib"
-    fi
-
-    # Check for system serf
-    libo_CHECK_SYSTEM_MODULE([serf],[SERF],[serf-1 >= 1.3.9])
-    ;;
-neon)
-    AC_MSG_RESULT([neon])
-    # Check for system neon
-    libo_CHECK_SYSTEM_MODULE([neon],[NEON],[neon >= 0.31.2])
-    if test "$with_system_neon" = "yes"; then
-        NEON_VERSION="`$PKG_CONFIG --modversion neon | $SED 's/\.//g'`"
-    else
-        NEON_VERSION=0312
-    fi
-    AC_SUBST(NEON_VERSION)
-    ;;
-*)
-    AC_MSG_RESULT([none, disabled])
-    WITH_WEBDAV=""
+    WITH_WEBDAV=TRUE
     ;;
 esac
 AC_SUBST(WITH_WEBDAV)
@@ -11049,25 +11081,6 @@ if test "$build_crypto" = yes; then
     fi
 fi
 
-dnl ===================================================================
-dnl Check for building gnutls
-dnl ===================================================================
-AC_MSG_CHECKING([whether to use gnutls])
-if test "$WITH_WEBDAV" = "neon" -a "$with_system_neon" = no -a "$enable_openssl" = "no"; then
-    AC_MSG_RESULT([yes])
-    AM_PATH_LIBGCRYPT()
-    PKG_CHECK_MODULES(GNUTLS, [gnutls],,
-        AC_MSG_ERROR([[Disabling OpenSSL was requested, but GNUTLS is not
-                      available in the system to use as replacement.]]))
-    FilterLibs "${LIBGCRYPT_LIBS}"
-    LIBGCRYPT_LIBS="${filteredlibs}"
-else
-    AC_MSG_RESULT([no])
-fi
-
-AC_SUBST([LIBGCRYPT_CFLAGS])
-AC_SUBST([LIBGCRYPT_LIBS])
-
 dnl ===================================================================
 dnl Check for system redland
 dnl ===================================================================
@@ -11372,21 +11385,9 @@ if test "$with_system_libnumbertext" = "yes"; then
     SYSTEM_LIBNUMBERTEXT=YES
 else
     SYSTEM_LIBNUMBERTEXT=
-    AC_LANG_PUSH([C++])
-    save_CPPFLAGS=$CPPFLAGS
-    CPPFLAGS="$CPPFLAGS $CXXFLAGS_CXX11"
-    AC_CHECK_HEADERS([codecvt regex])
-    AS_IF([test "x$ac_cv_header_codecvt" != xyes -o "x$ac_cv_header_regex" != xyes],
-            [ LIBNUMBERTEXT_CFLAGS=''
-              AC_MSG_WARN([No system-provided libnumbertext or codecvt/regex C++11 headers (min. libstdc++ 4.9).
-                           Enable libnumbertext fallback (missing number to number name conversion).])
-            ])
-    CPPFLAGS=$save_CPPFLAGS
-    AC_LANG_POP([C++])
 fi
 AC_SUBST(SYSTEM_LIBNUMBERTEXT)
 AC_SUBST(SYSTEM_LIBNUMBERTEXT_DATA)
-AC_SUBST(LIBNUMBERTEXT_CFLAGS)
 
 dnl ***************************************
 dnl testing libc version for Linux...
@@ -11460,6 +11461,19 @@ else
     fi
 fi
 AC_SUBST([FLEX])
+
+AC_PATH_PROG(DIFF, diff)
+if test -z "$DIFF"; then
+    AC_MSG_ERROR(["diff" not found in \$PATH, install it])
+fi
+AC_SUBST([DIFF])
+
+AC_PATH_PROG(UNIQ, uniq)
+if test -z "$UNIQ"; then
+    AC_MSG_ERROR(["uniq" not found in \$PATH, install it])
+fi
+AC_SUBST([UNIQ])
+
 dnl ***************************************
 dnl Checking for patch
 dnl ***************************************
@@ -11525,7 +11539,7 @@ elif $GNUCP --version 2>/dev/null | grep "GNU fileutils" >/dev/null 2>/dev/null;
     AC_MSG_RESULT([yes])
 else
     case "$build_os" in
-    darwin*|macos*|netbsd*|openbsd*|freebsd*|dragonfly*|aix*)
+    darwin*|netbsd*|openbsd*|freebsd*|dragonfly*|aix*)
         x_GNUCP=[\#]
         GNUCP=''
         AC_MSG_RESULT([no gnucp found - using the system's cp command])
@@ -11596,7 +11610,8 @@ fi
 dnl ===================================================================
 dnl Check for system epoxy
 dnl ===================================================================
-libo_CHECK_SYSTEM_MODULE([epoxy], [EPOXY], [epoxy >= 1.2], ["-I${WORKDIR}/UnpackedTarball/epoxy/include"])
+EPOXY_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/epoxy/include"
+libo_CHECK_SYSTEM_MODULE([epoxy], [EPOXY], [epoxy >= 1.2])
 
 dnl ===================================================================
 dnl Set vcl option: coordinate device in double or sal_Int32
@@ -11615,62 +11630,14 @@ dnl ===================================================================
 dnl Show which vclplugs will be built.
 dnl ===================================================================
 R=""
-if test "$USING_X11" != TRUE; then
-    enable_gtk3=no
-fi
-
-ENABLE_GTK3=""
-if test "x$enable_gtk3" = "xyes"; then
-    ENABLE_GTK3="TRUE"
-    AC_DEFINE(ENABLE_GTK3)
-    R="$R gtk3"
-fi
-AC_SUBST(ENABLE_GTK3)
-
-ENABLE_GTK3_KDE5=""
-if test "x$enable_gtk3_kde5" = "xyes"; then
-    ENABLE_GTK3_KDE5="TRUE"
-    AC_DEFINE(ENABLE_GTK3_KDE5)
-    R="$R gtk3_kde5"
-fi
-AC_SUBST(ENABLE_GTK3_KDE5)
-
-ENABLE_GTK4=""
-if test "x$enable_gtk4" = "xyes"; then
-    ENABLE_GTK4="TRUE"
-    AC_DEFINE(ENABLE_GTK4)
-    R="$R gtk4"
-fi
-AC_SUBST(ENABLE_GTK4)
-
-ENABLE_QT5=""
-if test "x$enable_qt5" = "xyes"; then
-    ENABLE_QT5="TRUE"
-    AC_DEFINE(ENABLE_QT5)
-    R="$R qt5"
-fi
-AC_SUBST(ENABLE_QT5)
-
-ENABLE_QT6=""
-if test "x$enable_qt6" = "xyes"; then
-    ENABLE_QT6="TRUE"
-    AC_DEFINE(ENABLE_QT6)
-    R="$R qt6"
-fi
-AC_SUBST(ENABLE_QT6)
-
-
-ENABLE_KF5=""
-if test "x$enable_kf5" = "xyes"; then
-    ENABLE_KF5="TRUE"
-    AC_DEFINE(ENABLE_KF5)
-    R="$R kf5"
-fi
-AC_SUBST(ENABLE_KF5)
 
-if test "x$USING_X11" = "xyes"; then
-    R="$R gen"
-fi
+libo_ENABLE_VCLPLUG([gen])
+libo_ENABLE_VCLPLUG([gtk3])
+libo_ENABLE_VCLPLUG([gtk3_kde5])
+libo_ENABLE_VCLPLUG([gtk4])
+libo_ENABLE_VCLPLUG([kf5])
+libo_ENABLE_VCLPLUG([qt5])
+libo_ENABLE_VCLPLUG([qt6])
 
 if test "$_os" = "WINNT"; then
     R="$R win"
@@ -11690,6 +11657,10 @@ AC_MSG_NOTICE([VCLplugs to be built:${build_vcl_plugins}])
 VCL_PLUGIN_INFO=$R
 AC_SUBST([VCL_PLUGIN_INFO])
 
+if test "$DISABLE_DYNLOADING" = TRUE -a -z "$DISABLE_GUI" -a \( -z "$R" -o $(echo "$R" | wc -w) -ne 1 \); then
+    AC_MSG_ERROR([Can't build --disable-dynamic-loading without --disable-gui and a single VCL plugin"])
+fi
+
 dnl ===================================================================
 dnl Check for GTK libraries
 dnl ===================================================================
@@ -11701,7 +11672,7 @@ if test "$test_gtk3" = yes -a "x$enable_gtk3" = "xyes" -o "x$enable_gtk3_kde5" =
         add_warning 'Non-system cairo combined with gtk3 is assumed to cause trouble; proceed at your own risk.'
     fi
     : ${with_system_cairo:=yes}
-    PKG_CHECK_MODULES(GTK3, gtk+-3.0 >= 3.20 gtk+-unix-print-3.0 gmodule-no-export-2.0 glib-2.0 >= 2.38 cairo)
+    PKG_CHECK_MODULES(GTK3, gtk+-3.0 >= 3.20 gtk+-unix-print-3.0 gmodule-no-export-2.0 glib-2.0 >= 2.38 atk >= 2.28.1 cairo)
     GTK3_CFLAGS=$(printf '%s' "$GTK3_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
     GTK3_CFLAGS="$GTK3_CFLAGS -DGDK_DISABLE_DEPRECATED -DGTK_DISABLE_DEPRECATED"
     FilterLibs "${GTK3_LIBS}"
@@ -12012,35 +11983,35 @@ fi
 AC_SUBST(ENABLE_PDFIUM)
 
 if test "$ENABLE_PDFIUM" = "TRUE"; then
-    	AC_MSG_CHECKING([which OpenJPEG library to use])
-    	if test "$with_system_openjpeg" = "yes"; then
-		SYSTEM_OPENJPEG2=TRUE
-		AC_MSG_RESULT([external])
-        	PKG_CHECK_MODULES( OPENJPEG2, libopenjp2 )
-        	OPENJPEG2_CFLAGS=$(printf '%s' "$OPENJPEG2_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
-        	FilterLibs "${OPENJPEG2_LIBS}"
-        	OPENJPEG2_LIBS="${filteredlibs}"
-	else
-		SYSTEM_OPENJPEG2=FALSE
-		AC_MSG_RESULT([internal])
-	fi
-    	AC_MSG_CHECKING([which Abseil library to use])
-	if test "$with_system_abseil" = "yes"; then
-		AC_MSG_RESULT([external])
-        	SYSTEM_ABSEIL=TRUE
-        	AC_LANG_PUSH([C++])
-        	AC_CHECK_HEADER(absl/types/bad_optional_access.h, [],
-            		[AC_MSG_ERROR(abseil headers not found.)], [])
-        	#ABSEIL_CFLAGS=-I/usr/include
-        	AC_CHECK_LIB([absl_bad_optional_access], [main], [ABSEIL_LIBS=-labsl_bad_optional_access],
-                      	[ AC_MSG_ERROR([libabsl_bad_optional_access library not found.]) ])
-        	AC_LANG_POP([C++])
-        	ABSEIL_CFLAGS=$(printf '%s' "$ABSEIL_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
-        	FilterLibs "${ABSEIL_LIBS}"
-        	ABSEIL_LIBS="${filteredlibs}"
-	else
-		AC_MSG_RESULT([internal])
-	fi
+    AC_MSG_CHECKING([which OpenJPEG library to use])
+    if test "$with_system_openjpeg" = "yes"; then
+        SYSTEM_OPENJPEG2=TRUE
+        AC_MSG_RESULT([external])
+        PKG_CHECK_MODULES( OPENJPEG2, libopenjp2 )
+        OPENJPEG2_CFLAGS=$(printf '%s' "$OPENJPEG2_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
+        FilterLibs "${OPENJPEG2_LIBS}"
+        OPENJPEG2_LIBS="${filteredlibs}"
+    else
+        SYSTEM_OPENJPEG2=FALSE
+        AC_MSG_RESULT([internal])
+    fi
+
+    AC_MSG_CHECKING([which Abseil library to use])
+    if test "$with_system_abseil" = "yes"; then
+        AC_MSG_RESULT([external])
+        SYSTEM_ABSEIL=TRUE
+        AC_LANG_PUSH([C++])
+        AC_CHECK_HEADER(absl/types/bad_optional_access.h, [],
+                        [AC_MSG_ERROR(abseil headers not found.)], [])
+        AC_CHECK_LIB([absl_bad_optional_access], [main], [ABSEIL_LIBS=-labsl_bad_optional_access],
+                     [AC_MSG_ERROR([libabsl_bad_optional_access library not found.])])
+        AC_LANG_POP([C++])
+        ABSEIL_CFLAGS=$(printf '%s' "$ABSEIL_CFLAGS" | sed -e "s/-I/${ISYSTEM?}/g")
+        FilterLibs "${ABSEIL_LIBS}"
+        ABSEIL_LIBS="${filteredlibs}"
+    else
+        AC_MSG_RESULT([internal])
+    fi
 fi
 AC_SUBST(SYSTEM_OPENJPEG2)
 AC_SUBST(SYSTEM_ABSEIL)
@@ -12166,6 +12137,12 @@ if test "$ENABLE_SKIA" = TRUE -a "$COM_IS_CLANG" != TRUE; then
             AC_MSG_CHECKING([for clang-cl])
             if test -x "$VC_PRODUCT_DIR/Tools/Llvm/bin/clang-cl.exe"; then
                 LO_CLANG_CC=`win_short_path_for_make "$VC_PRODUCT_DIR/Tools/Llvm/bin/clang-cl.exe"`
+            elif test -n "$PROGRAMFILES" -a -x "$PROGRAMFILES/LLVM/bin/clang-cl.exe"; then
+                LO_CLANG_CC=`win_short_path_for_make "$PROGRAMFILES/LLVM/bin/clang-cl.exe"`
+            elif test -x "c:/Program Files/LLVM/bin/clang-cl.exe"; then
+                LO_CLANG_CC=`win_short_path_for_make "c:/Program Files/LLVM/bin/clang-cl.exe"`
+            fi
+            if test -n "$LO_CLANG_CC"; then
                 dnl explicitly set -m32/-m64
                 LO_CLANG_CC="$LO_CLANG_CC -m$WIN_HOST_BITS"
                 LO_CLANG_CXX="$LO_CLANG_CC"
@@ -12173,6 +12150,17 @@ if test "$ENABLE_SKIA" = TRUE -a "$COM_IS_CLANG" != TRUE; then
             else
                 AC_MSG_RESULT([no])
             fi
+
+            AC_MSG_CHECKING([the dependency generation prefix (clang.exe -showIncludes)])
+            echo "#include <stdlib.h>" > conftest.c
+            LO_CLANG_SHOWINCLUDES_PREFIX=`$LO_CLANG_CC $CFLAGS -c -showIncludes conftest.c 2>/dev/null | \
+                grep 'stdlib\.h' | head -n1 | sed 's/ [[[:alpha:]]]:.*//'`
+            rm -f conftest.c conftest.obj
+            if test -z "$LO_CLANG_SHOWINCLUDES_PREFIX"; then
+                AC_MSG_ERROR([cannot determine the -showIncludes prefix])
+            else
+                AC_MSG_RESULT(["$LO_CLANG_SHOWINCLUDES_PREFIX"])
+            fi
         else
             AC_CHECK_PROG(LO_CLANG_CC,clang,clang,[])
             AC_CHECK_PROG(LO_CLANG_CXX,clang++,clang++,[])
@@ -12480,21 +12468,21 @@ AC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX512)
 AC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_AVX512F)
 AC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_F16C)
 AC_SUBST(LO_CLANG_CXXFLAGS_INTRINSICS_FMA)
+AC_SUBST(LO_CLANG_SHOWINCLUDES_PREFIX)
 AC_SUBST(CLANG_USE_LD)
 AC_SUBST([HAVE_LO_CLANG_DLLEXPORTINLINES])
 
 SYSTEM_GPGMEPP=
 
+AC_MSG_CHECKING([whether to enable gpgmepp])
 if test "$enable_gpgmepp" = no; then
-    AC_MSG_CHECKING([whether to enable gpgmepp])
     AC_MSG_RESULT([no])
 elif test "$enable_mpl_subset" = "yes"; then
-    AC_MSG_CHECKING([whether gpgmepp should be disabled due to building just MPL])
-    AC_MSG_RESULT([yes])
+    AC_MSG_RESULT([no (MPL only])
 elif test "$enable_fuzzers" = "yes"; then
-    AC_MSG_CHECKING([whether gpgmepp should be disabled due to oss-fuzz])
+    AC_MSG_RESULT([no (oss-fuzz)])
+elif test \( \( "$_os" = "Linux" -o "$_os" = "Darwin" \) -a "$ENABLE_NSS" = TRUE \) -o "$_os" = "WINNT" ; then
     AC_MSG_RESULT([yes])
-elif test "$_os" = "Linux" -o "$_os" = "Darwin" -o "$_os" = "WINNT" ; then
     dnl ===================================================================
     dnl Check for system gpgme
     dnl ===================================================================
@@ -12568,6 +12556,8 @@ elif test "$_os" = "Linux" -o "$_os" = "Darwin" -o "$_os" = "WINNT" ; then
         AC_MSG_RESULT([no])
      fi
    fi
+else
+    AC_MSG_RESULT([no (unsupported OS or missing NSS)])
 fi
 AC_SUBST(ENABLE_GPGMEPP)
 AC_SUBST(SYSTEM_GPGMEPP)
@@ -12825,7 +12815,7 @@ AC_SUBST(RHINO_JAR)
 # platforms there.
 supports_multilib=
 case "$host_cpu" in
-x86_64 | powerpc64 | powerpc64le | s390x | aarch64 | mips64 | mips64el)
+x86_64 | powerpc64 | powerpc64le | s390x | aarch64 | mips64 | mips64el | riscv64)
     if test "$SAL_TYPES_SIZEOFLONG" = "8"; then
         supports_multilib="yes"
     fi
@@ -12932,6 +12922,21 @@ then
         if test ! -f "${qt5_platformsdir}"/libqwasm.a -o ! -f "$QT5_PLATFORMS_SRCDIR"/wasm_shell.html; then
             AC_MSG_ERROR([No Qt5 WASM QPA plugin found in ${qt5_platformsdir} or ${QT5_PLATFORMS_SRCDIR}])
         fi
+
+        EMSDK_LLVM_NM="$(em-config LLVM_ROOT)"/llvm-nm
+        if ! test -x "$EMSDK_LLVM_NM"; then
+            AC_MSG_ERROR([Missing llvm-nm expected to be found at "$EMSDK_LLVM_NM".])
+        fi
+        if test ! -f "${qt5_libdir}"/libQt5Gui.a; then
+            AC_MSG_ERROR([No Qt5 WASM libQt5Gui.a in ${qt5_libdir}])
+        fi
+        QT5_WASM_SJLJ="`${EMSDK_LLVM_NM} "${qt5_libdir}"/libQt5Gui.a 2>/dev/null | $GREP emscripten_longjmp`"
+        if test "$ENABLE_WASM_EXCEPTIONS" = TRUE -a -n "$QT5_WASM_SJLJ"; then
+            AC_MSG_ERROR(['emscripten_longjmp' symbol found in libQt5Gui.a (missing '-s SUPPORT_LONGJMP=wasm'). See static/README.wasm.md.])
+        fi
+        if test "$ENABLE_WASM_EXCEPTIONS" != TRUE -a -z "$QT5_WASM_SJLJ"; then
+            AC_MSG_ERROR(['emscripten_longjmp' symbol not found in libQt5Gui.a. You probably use an incompatible Qt build with '-s SUPPORT_LONGJMP=wasm'.])
+        fi
     fi
 
     QT5_CFLAGS="-I$qt5_incdir -DQT_CLEAN_NAMESPACE -DQT_THREAD_SUPPORT -DQT_NO_VERSION_TAGGING"
@@ -13010,7 +13015,7 @@ then
     if test -n "$QT6DIR"; then
         AC_PATH_PROG(QMAKE6, [qmake], no, [$QT6DIR/bin])
     else
-        AC_PATH_PROGS(QMAKE6, [qmake-qt6 qmake], no)
+        AC_PATH_PROGS(QMAKE6, [qmake-qt6 qmake6 qmake], no)
     fi
     if test "$QMAKE6" = "no"; then
         AC_MSG_ERROR([Qmake not found.  Please specify the root of your Qt6 installation by exporting QT6DIR before running "configure".])
@@ -13087,7 +13092,14 @@ then
 
     dnl Check for Meta Object Compiler
 
-    AC_PATH_PROGS( MOC6, [moc-qt6 moc], no, [`dirname $qt6_libdir`/libexec:$QT6DIR/libexec:$PATH])
+    for lib_dir in $qt6_libdirs; do
+        if test -z "$qt6_libexec_dirs"; then
+            qt6_libexec_dirs="$lib_dir/libexec"
+        else
+            qt6_libexec_dirs="$qt6_libexec_dirs:$lib_dir/libexec"
+        fi
+    done
+    AC_PATH_PROGS( MOC6, [moc-qt6 moc], no, [`dirname $qt6_libdir`/libexec:$QT6DIR/libexec:$qt6_libexec_dirs:$PATH])
     if test "$MOC6" = "no"; then
         AC_MSG_ERROR([Qt Meta Object Compiler not found.  Please specify
 the root of your Qt installation by exporting QT6DIR before running "configure".])
@@ -13210,14 +13222,14 @@ dnl ===================================================================
 AC_MSG_CHECKING([which themes to include])
 # if none given use default subset of available themes
 if test "x$with_theme" = "x" -o "x$with_theme" = "xyes"; then
-    with_theme="breeze breeze_dark breeze_dark_svg breeze_svg colibre colibre_svg elementary elementary_svg karasa_jaga karasa_jaga_svg sifr sifr_svg sifr_dark sifr_dark_svg sukapura sukapura_svg"
+    with_theme="breeze breeze_dark breeze_dark_svg breeze_svg colibre colibre_svg colibre_dark colibre_dark_svg elementary elementary_svg karasa_jaga karasa_jaga_svg sifr sifr_svg sifr_dark sifr_dark_svg sukapura sukapura_svg"
 fi
 
 WITH_THEMES=""
 if test "x$with_theme" != "xno"; then
     for theme in $with_theme; do
         case $theme in
-        breeze|breeze_dark|breeze_dark_svg|breeze_svg|colibre|colibre_svg|elementary|elementary_svg|karasa_jaga|karasa_jaga_svg|sifr|sifr_svg|sifr_dark|sifr_dark_svg|sukapura|sukapura_svg) real_theme="$theme" ;;
+        breeze|breeze_dark|breeze_dark_svg|breeze_svg|colibre|colibre_svg|colibre_dark|colibre_dark_svg|elementary|elementary_svg|karasa_jaga|karasa_jaga_svg|sifr|sifr_svg|sifr_dark|sifr_dark_svg|sukapura|sukapura_svg) real_theme="$theme" ;;
         default) real_theme=colibre ;;
         *) AC_MSG_ERROR([Unknown value for --with-theme: $theme]) ;;
         esac
@@ -13253,11 +13265,9 @@ dnl There are standalone tests for each of these below.
 WITH_EXTRA_EXTENSIONS=
 AC_SUBST([WITH_EXTRA_EXTENSIONS])
 
-libo_CHECK_EXTENSION([ConvertTextToNumber],[CT2N],[ct2n],[ct2n],[])
 libo_CHECK_EXTENSION([Numbertext],[NUMBERTEXT],[numbertext],[numbertext],[b7cae45ad2c23551fd6ccb8ae2c1f59e-numbertext_0.9.5.oxt])
 if test "x$with_java" != "xno"; then
     libo_CHECK_EXTENSION([NLPSolver],[NLPSOLVER],[nlpsolver],[nlpsolver],[])
-    libo_CHECK_EXTENSION([LanguageTool],[LANGUAGETOOL],[languagetool],[languagetool],[])
 fi
 
 AC_MSG_CHECKING([whether to build opens___.ttf])
@@ -13540,7 +13550,21 @@ dnl ===================================================================
 dnl Test whether to build libpng or rely on the system version
 dnl ===================================================================
 
-libo_CHECK_SYSTEM_MODULE([libpng],[LIBPNG],[libpng],["-I${WORKDIR}/UnpackedTarball/libpng"],["-L${WORKDIR}/LinkTarget/StaticLibrary -llibpng"])
+LIBPNG_CFLAGS_internal="-I${WORKDIR}/UnpackedTarball/libpng"
+LIBPNG_LIBS_internal="-L${WORKDIR}/LinkTarget/StaticLibrary -llibpng"
+libo_CHECK_SYSTEM_MODULE([libpng],[LIBPNG],[libpng])
+
+dnl ===================================================================
+dnl Test whether to build libtiff or rely on the system version
+dnl ===================================================================
+
+libo_CHECK_SYSTEM_MODULE([libtiff],[LIBTIFF],[libtiff-4])
+
+dnl ===================================================================
+dnl Test whether to build libwebp or rely on the system version
+dnl ===================================================================
+
+libo_CHECK_SYSTEM_MODULE([libwebp],[LIBWEBP],[libwebp])
 
 dnl ===================================================================
 dnl Check for runtime JVM search path
@@ -13944,7 +13968,7 @@ if test -d "$SRC_ROOT/translations/source"; then
 fi
 AC_SUBST(WITH_POOR_HELP_LOCALIZATIONS)
 
-if test -n "$with_locales"; then
+if test -n "$with_locales" -a "$with_locales" != ALL; then
     WITH_LOCALES="$with_locales"
 
     just_langs="`echo $WITH_LOCALES | sed -e 's/_[A-Z]*//g'`"
@@ -14242,16 +14266,6 @@ else
     fi
 fi
 
-if test "$no_parallelism_make" = "YES" && test $PARALLELISM -gt 1; then
-    if test -z "$with_parallelism"; then
-            AC_MSG_WARN([gmake 3.81 crashes with parallelism > 1, reducing it to 1. upgrade to 3.82 to avoid this.])
-            add_warning "gmake 3.81 crashes with parallelism > 1, reducing it to 1. upgrade to 3.82 to avoid this."
-            PARALLELISM="1"
-    else
-        add_warning "make 3.81 is prone to crashes with parallelism > 1. Since --with-parallelism was explicitly given, it is honored, but do not complain when make segfaults on you."
-    fi
-fi
-
 if test $PARALLELISM -eq 0; then
     AC_MSG_RESULT([explicit make -j option needed])
 else
@@ -14259,14 +14273,6 @@ else
 fi
 AC_SUBST(PARALLELISM)
 
-IWYU_PATH="$with_iwyu"
-AC_SUBST(IWYU_PATH)
-if test ! -z "$IWYU_PATH"; then
-    if test ! -f "$IWYU_PATH"; then
-        AC_MSG_ERROR([cannot find include-what-you-use binary specified by --with-iwyu])
-    fi
-fi
-
 #
 # Set up ILIB for MSVC build
 #
@@ -14308,9 +14314,13 @@ dnl from consteval constructor initializing const variable",
 dnl <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98752> "wrong 'error: ‘this’ is not a constant
 dnl expression' with consteval constructor", <https://bugs.llvm.org/show_bug.cgi?id=50063> "code
 dnl using consteval: 'clang/lib/CodeGen/Address.h:38: llvm::Value*
-dnl clang::CodeGen::Address::getPointer() const: Assertion `isValid()' failed.'", or
+dnl clang::CodeGen::Address::getPointer() const: Assertion `isValid()' failed.'",
 dnl <https://developercommunity.visualstudio.com/t/1581879> "Bogus error C7595 with consteval
-dnl constructor in ternary expression (/std:c++latest)":
+dnl constructor in ternary expression (/std:c++latest)", or
+dnl <https://github.com/llvm/llvm-project/issues/54612> "C++20, consteval, anonymous union:
+dnl llvm/lib/IR/Instructions.cpp:1491: void llvm::StoreInst::AssertOK(): Assertion
+dnl `cast<PointerType>(getOperand(1)->getType())->isOpaqueOrPointeeTypeMatches(getOperand(0)->getType())
+dnl && "Ptr must be a pointer to Val type!"' failed.":
 AC_LANG_PUSH([C++])
 save_CXX=$CXX
 if test "$COM" = MSC && test "$COM_IS_CLANG" != TRUE; then
@@ -14342,6 +14352,16 @@ AC_RUN_IFELSE([AC_LANG_PROGRAM([
 
         struct S4 { consteval S4() = default; };
         void f4(bool b) { b ? S4() : S4(); }
+
+        struct S5 {
+            consteval S5() { c = 0; }
+            char * f() { return &c; }
+            union {
+                char c;
+                int i;
+            };
+        };
+        auto s5 = S5().f();
     ], [
         return (s.i == 1) ? 0 : 1;
     ])], [
@@ -14423,9 +14443,6 @@ if test "$enable_mpl_subset" = "yes"; then
     if test "$enable_lotuswordpro" = "yes"; then
         AC_MSG_ERROR([need to --disable-lotuswordpro - a Lotus Word Pro file format import filter.])
     fi
-    if test "$WITH_WEBDAV" = "neon"; then
-        AC_MSG_ERROR([need --with-webdav=serf or --without-webdav - webdav support.])
-    fi
     if test -n "$ENABLE_POPPLER"; then
         if test "x$SYSTEM_POPPLER" = "x"; then
             AC_MSG_ERROR([need to disable PDF import via poppler or use system library])
@@ -14673,7 +14690,7 @@ AC_CONFIG_FILES([config_host.mk
                  hardened_runtime.xcent
                  instsetoo_native/util/openoffice.lst
                  sysui/desktop/macosx/Info.plist
-                 vs-code-template.code-workspace:.vscode/vs-code-template.code-workspace.in])
+                 vs-code.code-workspace.template:.vscode/vs-code-template.code-workspace.in])
 AC_CONFIG_HEADERS([config_host/config_buildid.h])
 AC_CONFIG_HEADERS([config_host/config_box2d.h])
 AC_CONFIG_HEADERS([config_host/config_clang.h])
@@ -14689,6 +14706,7 @@ AC_CONFIG_HEADERS([config_host/config_feature_desktop.h])
 AC_CONFIG_HEADERS([config_host/config_feature_opencl.h])
 AC_CONFIG_HEADERS([config_host/config_firebird.h])
 AC_CONFIG_HEADERS([config_host/config_folders.h])
+AC_CONFIG_HEADERS([config_host/config_fonts.h])
 AC_CONFIG_HEADERS([config_host/config_fuzzers.h])
 AC_CONFIG_HEADERS([config_host/config_gio.h])
 AC_CONFIG_HEADERS([config_host/config_global.h])
@@ -14706,6 +14724,7 @@ AC_CONFIG_HEADERS([config_host/config_options_calc.h])
 AC_CONFIG_HEADERS([config_host/config_zxing.h])
 AC_CONFIG_HEADERS([config_host/config_skia.h])
 AC_CONFIG_HEADERS([config_host/config_typesizes.h])
+AC_CONFIG_HEADERS([config_host/config_validation.h])
 AC_CONFIG_HEADERS([config_host/config_vendor.h])
 AC_CONFIG_HEADERS([config_host/config_vcl.h])
 AC_CONFIG_HEADERS([config_host/config_vclplug.h])
@@ -14714,6 +14733,8 @@ AC_CONFIG_HEADERS([config_host/config_oauth2.h])
 AC_CONFIG_HEADERS([config_host/config_poppler.h])
 AC_CONFIG_HEADERS([config_host/config_python.h])
 AC_CONFIG_HEADERS([config_host/config_writerperfect.h])
+AC_CONFIG_HEADERS([config_host/config_wasm_strip.h])
+AC_CONFIG_HEADERS([solenv/lockfile/autoconf.h])
 AC_OUTPUT
 
 if test "$CROSS_COMPILING" = TRUE; then
@@ -14785,12 +14806,12 @@ fi
 cat << _EOF
 ****************************************************************************
 
-To build, run:
-$GNUMAKE
-
-To view some help, run:
+To show information on various make targets and make flags, run:
 $GNUMAKE help
 
+To just build, run:
+$GNUMAKE
+
 _EOF
 
 if test $_os != WINNT -a "$CROSS_COMPILING" != TRUE; then
@@ -14805,7 +14826,7 @@ _EOF
     fi
     cat << _EOF
 
-If you want to run the smoketest, run:
+If you want to run the unit tests, run:
 $GNUMAKE check
 
 _EOF
@@ -14822,4 +14843,7 @@ if test -s "$WARNINGS_FILE"; then
     cat "$WARNINGS_FILE"
 fi
 
+# Remove unneeded emconfigure artifacts
+rm -f a.out a.wasm a.out.js a.out.wasm
+
 dnl vim:set shiftwidth=4 softtabstop=4 expandtab:
diff --git a/solenv/gbuild/platform/LINUX_RISCV64_GCC.mk b/solenv/gbuild/platform/LINUX_RISCV64_GCC.mk
new file mode 100644
index 000000000..0531389e8
--- /dev/null
+++ b/solenv/gbuild/platform/LINUX_RISCV64_GCC.mk
@@ -0,0 +1,14 @@
+# -*- Mode: makefile-gmake; tab-width: 4; indent-tabs-mode: t -*-
+#
+# This file is part of the LibreOffice project.
+#
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+#
+
+gb_COMPILEROPTFLAGS := -Os
+
+include $(GBUILDDIR)/platform/linux.mk
+
+# vim: set noet sw=4:
-- 
2.30.2
